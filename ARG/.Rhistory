gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
gather_arg_subtype_order <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell,
decreasing = T),] # Order by abundance
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:100] #### Select top subtype (Choose)
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
top_arg_sum <- 0 # Initialization
total_arg_sum <- 0 # Initialization
length(top_subtype_list)
for (i in c(2:16)) {
print(paste('ARGs proportion in ',colnames(top_subtype)[i],': ',
label_percent(accuracy = 0.01)(sum(top_subtype[,i])/sum(arg_subtype[,i])),
sep = ""))
top_arg_sum <- sum(top_subtype[,i]) + top_arg_sum
total_arg_sum <- sum(arg_subtype[,i]) + total_arg_sum
} # Print top ARG percentage in each sample
total_top_proportion <- label_percent(accuracy = 0.01)(top_arg_sum/total_arg_sum)
print(paste('ARGs proportion in all sample',
total_top_proportion), sep="")
print(paste(Select top,length(top_subtype_list), ARGs))
print(paste("Select top",length(top_subtype_list),"ARGs",sep = ""))
print(paste("Select top",length(top_subtype_list)," ARGs",sep = ""))
print(paste("Select top ",length(top_subtype_list)," ARGs",sep = ""))
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
top_arg_sum <- 0 # Initialization
total_arg_sum <- 0 # Initialization
print(paste("Select top ",length(top_subtype_list)," ARGs",sep = ""))
for (i in c(2:16)) {
print(paste('ARGs proportion in ',colnames(top_subtype)[i],': ',
label_percent(accuracy = 0.01)(sum(top_subtype[,i])/sum(arg_subtype[,i])),
sep = ""))
top_arg_sum <- sum(top_subtype[,i]) + top_arg_sum
total_arg_sum <- sum(arg_subtype[,i]) + total_arg_sum
} # Print top ARG percentage in each sample
total_top_proportion <- label_percent(accuracy = 0.01)(top_arg_sum/total_arg_sum)
print(paste('ARGs proportion in all sample: ',
total_top_proportion), sep="") # Print top ARG percentage in all sample
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
gather_arg_subtype_order <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell,
decreasing = T),] # Order by abundance
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:100] #### Select top subtype (Choose)
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
top_arg_sum <- 0 # Initialization
total_arg_sum <- 0 # Initialization
arg_select<- paste("Select top ",length(top_subtype_list)," ARGs",sep = "")
for (i in c(2:16)) {
print(paste(arg_select,'ARGs proportion in ',colnames(top_subtype)[i],': ',
label_percent(accuracy = 0.01)(sum(top_subtype[,i])/sum(arg_subtype[,i])),
sep = ""))
top_arg_sum <- sum(top_subtype[,i]) + top_arg_sum
total_arg_sum <- sum(arg_subtype[,i]) + total_arg_sum
} # Print top ARG percentage in each sample
total_top_proportion <- label_percent(accuracy = 0.01)(top_arg_sum/total_arg_sum)
print(paste('ARGs proportion in all sample: ',
total_top_proportion), sep="") # Print top ARG percentage in all sample
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
gather_arg_subtype_order <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell,
decreasing = T),] # Order by abundance
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:100] #### Select top subtype (Choose)
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
top_arg_sum <- 0 # Initialization
total_arg_sum <- 0 # Initialization
arg_select<- paste("Top ",length(top_subtype_list),sep = "")
for (i in c(2:16)) {
print(paste(arg_select,'ARGs proportion in ',colnames(top_subtype)[i],': ',
label_percent(accuracy = 0.01)(sum(top_subtype[,i])/sum(arg_subtype[,i])),
sep = ""))
top_arg_sum <- sum(top_subtype[,i]) + top_arg_sum
total_arg_sum <- sum(arg_subtype[,i]) + total_arg_sum
} # Print top ARG percentage in each sample
total_top_proportion <- label_percent(accuracy = 0.01)(top_arg_sum/total_arg_sum)
print(paste('ARGs proportion in all sample: ',
total_top_proportion), sep="") # Print top ARG percentage in all sample
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
top_arg_sum <- 0 # Initialization
total_arg_sum <- 0 # Initialization
arg_select<- paste("Top ",length(top_subtype_list),sep = "")
for (i in c(2:16)) {
print(paste(arg_select,' ARGs proportion in ',colnames(top_subtype)[i],': ',
label_percent(accuracy = 0.01)(sum(top_subtype[,i])/sum(arg_subtype[,i])),
sep = ""))
top_arg_sum <- sum(top_subtype[,i]) + top_arg_sum
total_arg_sum <- sum(arg_subtype[,i]) + total_arg_sum
} # Print top ARG percentage in each sample
total_top_proportion <- label_percent(accuracy = 0.01)(top_arg_sum/total_arg_sum)
print(paste("Top ",' ARGs proportion in all sample: ',
total_top_proportion), sep="") # Print top ARG percentage in all sample
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
gather_arg_subtype_order <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell,
decreasing = T),] # Order by abundance
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:100] #### Select top subtype (Choose)
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
top_arg_sum <- 0 # Initialization
total_arg_sum <- 0 # Initialization
arg_select<- paste("Top ",length(top_subtype_list),sep = "")
for (i in c(2:16)) {
print(paste(arg_select,' ARGs proportion in ',colnames(top_subtype)[i],': ',
label_percent(accuracy = 0.01)(sum(top_subtype[,i])/sum(arg_subtype[,i])),
sep = ""))
top_arg_sum <- sum(top_subtype[,i]) + top_arg_sum
total_arg_sum <- sum(arg_subtype[,i]) + total_arg_sum
} # Print top ARG percentage in each sample
total_top_proportion <- label_percent(accuracy = 0.01)(top_arg_sum/total_arg_sum)
print(paste(arg_select,' ARGs proportion in all sample: ',
total_top_proportion), sep="") # Print top ARG percentage in all sample
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
gather_arg_subtype_order <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell,
decreasing = T),] # Order by abundance
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:100] #### Select top subtype (Choose)
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
top_arg_sum <- 0 # Initialization
total_arg_sum <- 0 # Initialization
arg_select<- paste("Top ",length(top_subtype_list),sep = "")
for (i in c(2:16)) {
print(paste(arg_select,' ARGs proportion in ',colnames(top_subtype)[i],': ',
label_percent(accuracy = 0.01)(sum(top_subtype[,i])/sum(arg_subtype[,i])),
sep = ""))
top_arg_sum <- sum(top_subtype[,i]) + top_arg_sum
total_arg_sum <- sum(arg_subtype[,i]) + total_arg_sum
} # Print top ARG percentage in each sample
total_top_proportion <- label_percent(accuracy = 0.01)(top_arg_sum/total_arg_sum)
print(paste(arg_select,'ARGs proportion in all samples:',
total_top_proportion), sep="") # Print top ARG percentage in all sample
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
arg_subtype <- read.xlsx("D:/ARG_project/Shell/args_oap/stage_two_output/normalized_cell.subtype.xlsx",
sheet = 1)
# Preview raw data
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
gather_arg_subtype_order <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell,
decreasing = T),] # Order by abundance
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:100] #### Select top subtype (Choose)
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
top_arg_sum <- 0 # Initialization
total_arg_sum <- 0 # Initialization
arg_select<- paste("Top ",length(top_subtype_list),sep = "")
### Print statistic result
for (i in c(2:16)) {
print(paste(arg_select,' ARGs proportion in ',colnames(top_subtype)[i],': ',
label_percent(accuracy = 0.01)(sum(top_subtype[,i])/sum(arg_subtype[,i])),
sep = ""))
top_arg_sum <- sum(top_subtype[,i]) + top_arg_sum
total_arg_sum <- sum(arg_subtype[,i]) + total_arg_sum
} # Print top ARG percentage in each sample
total_top_proportion <- label_percent(accuracy = 0.01)(top_arg_sum/total_arg_sum)
print(paste(arg_select,'ARGs proportion in all samples:',
total_top_proportion), sep="") # Print top ARG percentage in all sample
# ARG_subtype_cell_abundance.R
# Calculate and visualize ARG subtype/cell in each sample
# Import library
library(tidyverse)
library(stringr)
library(tibble)
library(openxlsx)
library(pheatmap)
library(RColorBrewer)
library(scales)
# Read ARG_type file (Something wrong with read.table, so read by )
arg_subtype <- read.xlsx("D:/ARG_project/Shell/args_oap/stage_two_output/normalized_cell.subtype.xlsx",
sheet = 1)
# Preview raw data
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
gather_arg_subtype_order <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell,
decreasing = T),] # Order by abundance
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:90] #### Select top subtype (Choose)
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
top_arg_sum <- 0 # Initialization
total_arg_sum <- 0 # Initialization
arg_select<- paste("Top ",length(top_subtype_list),sep = "")
### Print statistic result
for (i in c(2:16)) {
print(paste(arg_select,' ARGs proportion in ',colnames(top_subtype)[i],': ',
label_percent(accuracy = 0.01)(sum(top_subtype[,i])/sum(arg_subtype[,i])),
sep = ""))
top_arg_sum <- sum(top_subtype[,i]) + top_arg_sum
total_arg_sum <- sum(arg_subtype[,i]) + total_arg_sum
} # Print top ARG percentage in each sample
total_top_proportion <- label_percent(accuracy = 0.01)(top_arg_sum/total_arg_sum)
print(paste(arg_select,'ARGs proportion in all samples:',
total_top_proportion), sep="") # Print top ARG percentage in all sample
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
# ARG_subtype_cell_abundance.R
# Calculate and visualize ARG subtype/cell in each sample
# Import library
library(tidyverse)
library(stringr)
library(tibble)
library(openxlsx)
library(pheatmap)
library(RColorBrewer)
library(scales)
# Read ARG_type file (Something wrong with read.table, so read by )
arg_subtype <- read.xlsx("D:/ARG_project/Shell/args_oap/stage_two_output/normalized_cell.subtype.xlsx",
sheet = 1)
# Preview raw data
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
gather_arg_subtype_order <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell,
decreasing = T),] # Order by abundance
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:90] #### Select top subtype (Choose)
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
top_arg_sum <- 0 # Initialization
total_arg_sum <- 0 # Initialization
arg_select<- paste("Top ",length(top_subtype_list),sep = "")
### Print statistic result
for (i in c(2:16)) {
print(paste(arg_select,' ARGs proportion in ',colnames(top_subtype)[i],': ',
label_percent(accuracy = 0.01)(sum(top_subtype[,i])/sum(arg_subtype[,i])),
sep = ""))
top_arg_sum <- sum(top_subtype[,i]) + top_arg_sum
total_arg_sum <- sum(arg_subtype[,i]) + total_arg_sum
} # Print top ARG percentage in each sample
total_top_proportion <- label_percent(accuracy = 0.01)(top_arg_sum/total_arg_sum)
print(paste(arg_select,'ARGs proportion in all samples:',
total_top_proportion), sep="") # Print top ARG percentage in all sample
## Adjust "_" in dataframe
top_subtype <- top_subtype %>%
separate(subtype, c("type","subtype"),
sep = "__") # Split subtype by "_"
top_subtype$type <- gsub("_", " ", top_subtype$type) # Change _ to " " (e.g. beta_lactam to beta lactam)
## Create subtype-type table
type_subtype <- top_subtype %>% select(type, subtype)
row.names(type_subtype) <- type_subtype$subtype
type_subtype <- type_subtype %>% select(!subtype)
colnames(type_subtype) <- "ARG" # Change column name
top_subtype <- top_subtype[,-1] # Remove ARG type
# Change the first column to row name
row.names(top_subtype) <- top_subtype[,1]
top_subtype <- top_subtype[,-1]
# Usage pheatmap
top_subtype <- as.matrix(top_subtype) # Convert table to matrix
log_top_subtype <- log10(top_subtype) # log10 conversion
log_top_subtype[log_top_subtype == -Inf] <- NA
## Create annotation label (Note annotation_row was already created as type_subtype)
annotation_row = data.frame(Sample = factor(rep(c("ARP", "AT", "ODP"),
c(5, 5, 5))))
rownames(annotation_row) = colnames(log_top_subtype)
annotation_col <- type_subtype
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
p
print(p)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
# ARG_subtype_cell_abundance.R
# Calculate and visualize ARG subtype/cell in each sample
# Import library
library(tidyverse)
library(stringr)
library(tibble)
library(openxlsx)
library(pheatmap)
library(RColorBrewer)
library(scales)
# Read ARG_type file (Something wrong with read.table, so read by )
arg_subtype <- read.xlsx("D:/ARG_project/Shell/args_oap/stage_two_output/normalized_cell.subtype.xlsx",
sheet = 1)
# Preview raw data
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
gather_arg_subtype_order <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell,
decreasing = T),] # Order by abundance
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:90] #### Select top subtype (Choose)
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
top_arg_sum <- 0 # Initialization
total_arg_sum <- 0 # Initialization
arg_select<- paste("Top ",length(top_subtype_list),sep = "")
### Print statistic result
for (i in c(2:16)) {
print(paste(arg_select,' ARGs proportion in ',colnames(top_subtype)[i],': ',
label_percent(accuracy = 0.01)(sum(top_subtype[,i])/sum(arg_subtype[,i])),
sep = ""))
top_arg_sum <- sum(top_subtype[,i]) + top_arg_sum
total_arg_sum <- sum(arg_subtype[,i]) + total_arg_sum
} # Print top ARG percentage in each sample
total_top_proportion <- label_percent(accuracy = 0.01)(top_arg_sum/total_arg_sum)
print(paste(arg_select,'ARGs proportion in all samples:',
total_top_proportion), sep="") # Print top ARG percentage in all sample
## Adjust "_" in dataframe
top_subtype <- top_subtype %>%
separate(subtype, c("type","subtype"),
sep = "__") # Split subtype by "_"
top_subtype$type <- gsub("_", " ", top_subtype$type) # Change _ to " " (e.g. beta_lactam to beta lactam)
## Create subtype-type table
type_subtype <- top_subtype %>% select(type, subtype)
row.names(type_subtype) <- type_subtype$subtype
type_subtype <- type_subtype %>% select(!subtype)
colnames(type_subtype) <- "ARG" # Change column name
top_subtype <- top_subtype[,-1] # Remove ARG type
# Change the first column to row name
row.names(top_subtype) <- top_subtype[,1]
top_subtype <- top_subtype[,-1]
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
library(pheatmap)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
# ARG_subtype_cell_abundance.R
# Calculate and visualize ARG subtype/cell in each sample
# Import library
library(tidyverse)
library(stringr)
library(tibble)
library(openxlsx)
library(pheatmap)
library(RColorBrewer)
library(scales)
# Read ARG_type file (Something wrong with read.table, so read by )
arg_subtype <- read.xlsx("D:/ARG_project/Shell/args_oap/stage_two_output/normalized_cell.subtype.xlsx",
sheet = 1)
# Preview raw data
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
gather_arg_subtype_order <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell,
decreasing = T),] # Order by abundance
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:75] #### Select top subtype (Choose)
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
top_arg_sum <- 0 # Initialization
total_arg_sum <- 0 # Initialization
arg_select<- paste("Top ",length(top_subtype_list),sep = "")
### Print statistic result
for (i in c(2:16)) {
print(paste(arg_select,' ARGs proportion in ',colnames(top_subtype)[i],': ',
label_percent(accuracy = 0.01)(sum(top_subtype[,i])/sum(arg_subtype[,i])),
sep = ""))
top_arg_sum <- sum(top_subtype[,i]) + top_arg_sum
total_arg_sum <- sum(arg_subtype[,i]) + total_arg_sum
} # Print top ARG percentage in each sample
total_top_proportion <- label_percent(accuracy = 0.01)(top_arg_sum/total_arg_sum)
print(paste(arg_select,'ARGs proportion in all samples:',
total_top_proportion), sep="") # Print top ARG percentage in all sample
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
## Plot
phtmap <- pheatmap(t(log_top_subtype),
annotation_row = annotation_row, annotation_col = annotation_col,
cluster_cols = FALSE,
clustering_distance_rows = "euclidean")
### Rotate the cluster
library(seriation)
library(dendextend)
row_dend <- phtmap[[1]]
row_dend <- dendextend::rotate(row_dend, order = c("ODP5","ODP1","ODP3","ODP2","ODP4",
"ARP4","ARP2","ARP3","ARP1","ARP5",
"AT2","AT5","AT1","AT3","AT4") )
p <- pheatmap(t(log_top_subtype),
annotation_row = annotation_row, annotation_col = annotation_col,
cluster_cols = FALSE, annotation_colors = ann_colors,
clustering_distance_rows = "euclidean",
fontsize = 10, fontsize_row = fontsize, fontsize_col = fontsize
cellwidth = 12, cellheight = 17, bg = "transparent",
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
# Select color
display.brewer.all()
brewer.pal(3, "Set1")
brewer.pal(6, "Set3")
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
library("ggsci")
scale_color_palname()
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
p
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
# Import library
library(tidyverse)
library(stringr)
library(tibble)
# Read ARG_type file
arg_type <- read.table("D:/ARG_project/Shell/args_oap/stage_two_output/normalized_cell.type.txt",
header = TRUE, sep = "")
# Preview raw data
gather_arg_type <- gather(arg_type, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
## Add sample type column
gather_arg_type$sample_type <- NA
for (i in 1:nrow(gather_arg_type)) {
if (grepl("^AT",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "AT"
}
if (grepl("^ARP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ARP"
}
if (grepl("^ODP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ODP"
}
}
## Visualization
gather_arg_type$sample_type <- factor(gather_arg_type$sample_type, levels = c("AT", "ARP", "ODP"),
labels = c(expression(Aeration~tank),
expression(Aeration~tank~PM[2.5]),
expression(Outdoor~PM[2.5])
)) # Change facet title
ggplot(gather_arg_type, aes(x = sample, y = copy_per_cell, fill = type)) +
geom_bar(stat="identity") +
facet_wrap(~sample_type, scales = "free_x", labeller = label_parsed) +
theme_bw() +
xlab("") + ylab("Relative abundance (ARGs/cell)")
# Classify minimum ARG type to others
average_arg <- gather_arg_type %>%
group_by(sample_type, type) %>%
summarise_at(vars(copy_per_cell), funs(mean)) # Calculate mean value of ARG type in sample type
arg_order <- unique(
average_arg[
order(average_arg$copy_per_cell,
decreasing = T),
]$type) # unique ARG type order
arg_type <- arg_type %>%
arrange(factor(type, levels = arg_order)) # Order ARG type in spread format
## Convert the first column into row name
rownames(arg_type) <- arg_type[,1]
arg_type[,1] <- NULL
## Calculate others by summing  minimum arg
other_arg <- colSums(arg_type[11:26, ])
arg_type <- rbind(arg_type, other_arg)
rownames(arg_type)[rownames(arg_type) == "27"] <- "others"
arg_type <- arg_type[-(11:26),] # delete minimum arg type
rownames(arg_type) <- str_to_title(rownames(arg_type)) # Covert first letter to uppercase
arg_type <- tibble::rownames_to_column(arg_type, "type") # Convert row name back to first column
# Plot
## Transform to gather format
gather_arg_type <- gather(arg_type, key = "sample", value = "copy_per_cell",
ARP1:ODP5)
## Add sample type column
gather_arg_type$sample_type <- NA
for (i in 1:nrow(gather_arg_type)) {
if (grepl("^AT",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "AT"
}
if (grepl("^ARP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ARP"
}
if (grepl("^ODP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ODP"
}
}
## Change facet title
gather_arg_type$sample_type <- factor(gather_arg_type$sample_type, levels = c("AT", "ARP", "ODP"),
labels = c(expression(Aeration~tank),
expression(Aeration~tank~PM[2.5]),
expression(Outdoor~PM[2.5])
))
## Change specific ARG type
gather_arg_type$type[gather_arg_type$type == "Macrolide-Lincosamide-Streptogramin"] <- "MLS"
gather_arg_type$type[gather_arg_type$type == "Beta_lactam"] <- "Beta-lactam"
## Order ARG type
gather_arg_type$type <- factor(gather_arg_type$type,
levels = c("Multidrug", "Sulfonamide",
"MLS","Aminoglycoside",
"Tetracycline", "Rifamycin",
"Beta-lactam", "Bacitracin",
"Polymyxin", "Chloramphenicol",
"Others"))
## ggplot
p <- ggplot(gather_arg_type, aes(x = sample, y = copy_per_cell, fill = type)) +
geom_bar(stat="identity") +
facet_wrap(~sample_type, scales = "free_x", labeller = label_parsed) +
theme_bw() +
xlab("") + ylab("Relative abundance (ARGs/cell)") +
scale_fill_brewer(palette="Set3") +
guides(fill=guide_legend(title="ARG type")) +
theme(axis.text.x = element_text(size = 10, angle = 90, hjust=1),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
strip.text = element_text(size=10.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') #transparent legend panel)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
print(p)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_16S_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_16S_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_ppm_abundance.R", echo=TRUE)
print(p)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_rpkm_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_tpm_abundance.R", echo=TRUE)
