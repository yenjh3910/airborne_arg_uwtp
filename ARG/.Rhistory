arg_circos <- arg_circos[,-1]
# Convert to matrix
arg_circos<- as.matrix(arg_circos)
# Calculate others ARG type
Others <- colSums(arg_circos[11:26, ])
arg_circos <- rbind(arg_circos, Others)
# Delete minimum arg type
arg_circos <- arg_circos[-(11:26),]
# Covert first letter to uppercase
rownames(arg_circos) <- str_to_title(rownames(arg_circos))
# Change specific ARG type
row.names(arg_circos)[3] <- "MLS"
row.names(arg_circos)[6] <- "Beta-lactam"
# Change column order
arg_circos <- arg_circos[, c("AT", "ARP", "ODP")]
# Set color
display.brewer.all()
brewer.pal(n=6,name="Set2")
grid.col = c("#8DD3C7","#FFFFB3","#BEBADA",
"#FB8072","#80B1D3","#FDB462",
"#B3DE69","#FCCDE5","#FFED6F",
"#BC80BD","#D9D9D9", # ARG type
"#FBB4AE","#B3CDE3","#CCEBC5" # sample type
)
# Save
pdf("../../airborne_arg_uwtp_result/Figure/ARG/ARG_circos.pdf")
# Save
# pdf("../../airborne_arg_uwtp_result/Figure/ARG/ARG_circos.pdf")
graphics.off() # Reset figure window
circos.par(canvas.xlim = c(-0.5, 0.5), canvas.ylim = c(-1.5, 1))
chordDiagram(arg_circos, annotationTrack = "grid",
preAllocateTracks = 1, grid.col = grid.col,
directional = 1, big.gap = 10, scale = 0)
circos.trackPlotRegion(track.index = 1,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(cex = 0.8,mean(xlim), ylim[1] + .5, sector.name, facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
circos.axis(h = "top", labels.cex = 0.4, major.tick.percentage = 1, sector.index = sector.name, track.index = 2)
}, bg.border = NA)
dev.off()
dev.off()
# Save
pdf("../../airborne_arg_uwtp_result/Figure/ARG/ARG_circos.pdf")
graphics.off() # Reset figure window
circos.par(canvas.xlim = c(-0.5, 0.5), canvas.ylim = c(-1.5, 1))
chordDiagram(arg_circos, annotationTrack = "grid",
preAllocateTracks = 1, grid.col = grid.col,
directional = 1, big.gap = 10, scale = 0)
circos.trackPlotRegion(track.index = 1,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(cex = 0.8,mean(xlim), ylim[1] + .5, sector.name, facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
circos.axis(h = "top", labels.cex = 0.4, major.tick.percentage = 1, sector.index = sector.name, track.index = 2)
}, bg.border = NA)
dev.off()
# Save
pdf("../../airborne_arg_uwtp_result/Figure/ARG/ARG_circos.pdf")
graphics.off() # Reset figure window
circos.par(canvas.xlim = c(-0.5, 0.5), canvas.ylim = c(-1.5, 1))
chordDiagram(arg_circos, annotationTrack = "grid",
preAllocateTracks = 1, grid.col = grid.col,
directional = 1, big.gap = 10, scale = 0)
circos.trackPlotRegion(track.index = 1,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(cex = 0.8,mean(xlim), ylim[1] + .5, sector.name, facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
circos.axis(h = "top", labels.cex = 0.4, major.tick.percentage = 1, sector.index = sector.name, track.index = 2)
}, bg.border = NA)
dev.off()
dev.off()
graphics.off() # Reset figure window
# Save
pdf("../../airborne_arg_uwtp_result/Figure/ARG/ARG_circos.pdf")
circos.par(canvas.xlim = c(-0.5, 0.5), canvas.ylim = c(-1.5, 1))
chordDiagram(arg_circos, annotationTrack = "grid",
preAllocateTracks = 1, grid.col = grid.col,
directional = 1, big.gap = 10, scale = 0)
circos.trackPlotRegion(track.index = 1,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(cex = 0.8,mean(xlim), ylim[1] + .5, sector.name, facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
circos.axis(h = "top", labels.cex = 0.4, major.tick.percentage = 1, sector.index = sector.name, track.index = 2)
}, bg.border = NA)
dev.off()
# Import library
library(tidyverse)
library(stringr)
library(tibble)
# Read ARG_type file
arg_type <- read.table("../../airborne_arg_uwtp_result/args_oap/ARG/stage_two_output/normalized_cell.type.txt",
header = TRUE, sep = "")
# Preview raw data
gather_arg_type <- gather(arg_type, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
## Add sample type column
gather_arg_type$sample_type <- NA
for (i in 1:nrow(gather_arg_type)) {
if (grepl("^AT",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "AT"
}
if (grepl("^ARP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ARP"
}
if (grepl("^ODP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ODP"
}
}
# Statastic
arg_sum <- gather_arg_type %>% group_by(sample) %>% mutate(sum = sum(copy_per_cell))
arg_sum <- arg_sum %>% group_by(sample_type) %>% mutate(mean = mean(sum))
arg_sum <- arg_sum %>% group_by(sample_type)%>% mutate(sd = sd(sum)) %>%
select(sample_type, mean, sd) %>% unique()
## Visualization
gather_arg_type$sample_type <- factor(gather_arg_type$sample_type, levels = c("AT", "ARP", "ODP"),
labels = c(expression(Aeration~tank),
expression(Aeration~tank~PM[2.5]),
expression(Outdoor~PM[2.5])
)) # Change facet title
ggplot(gather_arg_type, aes(x = sample, y = copy_per_cell, fill = type)) +
geom_bar(stat="identity") +
facet_wrap(~sample_type, scales = "free_x", labeller = label_parsed) +
theme_bw() +
xlab("") + ylab("Relative abundance (ARGs/cell)")
# Classify minimum ARG type to others
average_arg <- gather_arg_type %>%
group_by(sample_type, type) %>%
summarise_at(vars(copy_per_cell), funs(mean)) # Calculate mean value of ARG type in sample type
arg_order <- unique(
average_arg[
order(average_arg$copy_per_cell,
decreasing = T),
]$type) # unique ARG type order
arg_type <- arg_type %>%
arrange(factor(type, levels = arg_order)) # Order ARG type in spread format
## Convert the first column into row name
rownames(arg_type) <- arg_type[,1]
arg_type[,1] <- NULL
## Calculate others by summing  minimum arg
other_arg <- colSums(arg_type[11:26, ])
arg_type <- rbind(arg_type, other_arg)
rownames(arg_type)[rownames(arg_type) == "27"] <- "others"
arg_type <- arg_type[-(11:26),] # delete minimum arg type
rownames(arg_type) <- str_to_title(rownames(arg_type)) # Covert first letter to uppercase
arg_type <- tibble::rownames_to_column(arg_type, "type") # Convert row name back to first column
# Plot
## Transform to gather format
gather_arg_type <- gather(arg_type, key = "sample", value = "copy_per_cell",
ARP1:ODP5)
## Add sample type column
gather_arg_type$sample_type <- NA
for (i in 1:nrow(gather_arg_type)) {
if (grepl("^AT",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "AT"
}
if (grepl("^ARP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ARP"
}
if (grepl("^ODP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ODP"
}
}
## Change facet title
gather_arg_type$sample_type <- factor(gather_arg_type$sample_type, levels = c("AT", "ARP", "ODP"),
labels = c(expression(Aeration~tank),
expression(Aeration~tank~PM[2.5]),
expression(Outdoor~PM[2.5])
))
## Change specific ARG type
gather_arg_type$type[gather_arg_type$type == "Macrolide-Lincosamide-Streptogramin"] <- "MLS"
gather_arg_type$type[gather_arg_type$type == "Beta_lactam"] <- "Beta-lactam"
## Order ARG type
gather_arg_type$type <- factor(gather_arg_type$type,
levels = c("Multidrug", "Sulfonamide",
"MLS","Aminoglycoside",
"Tetracycline", "Rifamycin",
"Beta-lactam", "Bacitracin",
"Polymyxin", "Chloramphenicol",
"Others"))
## ggplot
p <- ggplot(gather_arg_type, aes(x = sample, y = copy_per_cell, fill = type)) +
geom_bar(stat="identity") +
facet_wrap(~sample_type, scales = "free_x", labeller = label_parsed) +
theme_bw() +
xlab("") + ylab("Relative abundance (ARGs/cell)") +
scale_fill_brewer(palette="Set3") +
guides(fill=guide_legend(title="ARG type")) +
# scale_y_continuous(expand = c(0, 0)) + # y start at 0
theme(axis.text.x = element_text(size = 10, angle = 90, hjust=1),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
strip.text = element_text(size=10.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
# panel.grid.major = element_blank(), #remove major gridlines
# panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) #transparent legend bg
print(p)
## ggplot
p <- ggplot(gather_arg_type, aes(x = sample, y = copy_per_cell, fill = type)) +
geom_bar(stat="identity") +
facet_wrap(~sample_type, scales = "free_x", labeller = label_parsed) +
theme_bw() +
xlab("") + ylab("Relative abundance (ARGs/cell)") +
guides(fill=guide_legend(title="ARG type")) +
# scale_y_continuous(expand = c(0, 0)) + # y start at 0
theme(axis.text.x = element_text(size = 10, angle = 90, hjust=1),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
strip.text = element_text(size=10.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
# panel.grid.major = element_blank(), #remove major gridlines
# panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) + #transparent legend bg
scale_fill_manual(values=c("#8DD3C7","#FFFFB3","#BEBADA","#FB8072","#80B1D3",
"#FDB462","#B3DE69","#FCCDE5", "#FFED6F","#BC80BD",
"#CCEBC5","#D9D9D9"))
print(p)
# Plot
p<- ggplot(gat_merge_taxa, aes(x = sample, y = abundance, fill = taxa)) +
geom_bar(stat="identity", position = "fill") +
facet_wrap(~sample_type, scales = "free_x", labeller = label_parsed) +
theme_bw() +
xlab("") + ylab("Relative abundance (%)") +
guides(fill=guide_legend(title="Species")) +
theme(axis.text.x = element_text(size = 10, angle = 90, hjust=1),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
strip.text = element_text(size=10.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
legend.background = element_rect(fill='transparent')) + #transparent legend bg
scale_fill_manual(values=c("#8DD3C7","#FFFFB3","#BEBADA","#FB8072","#80B1D3",
"#FDB462","#B3DE69","#FCCDE5", "#FFED6F","#BC80BD",
"#D9D9D9"))
print(p)
# Plot
p<- ggplot(gat_merge_taxa, aes(x = sample, y = abundance, fill = taxa)) +
geom_bar(stat="identity", position = "fill") +
facet_wrap(~sample_type, scales = "free_x", labeller = label_parsed) +
theme_bw() +
xlab("") + ylab("Relative abundance (%)") +
guides(fill=guide_legend(title="Species")) +
theme(axis.text.x = element_text(size = 10, angle = 90, hjust=1),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
strip.text = element_text(size=10.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
legend.background = element_rect(fill='transparent')) + #transparent legend bg
scale_fill_manual(values=c("#8DD3C7","#FFFFB3","#BEBADA","#FB8072","#80B1D3",
"#FDB462","#B3DE69","#FCCDE5", "#FFED6F","#BC80BD",
"#D9D9D9"))
## ggplot
p <- ggplot(gather_arg_type, aes(x = sample, y = copy_per_cell, fill = type)) +
geom_bar(stat="identity") +
facet_wrap(~sample_type, scales = "free_x", labeller = label_parsed) +
theme_bw() +
xlab("") + ylab("Relative abundance (ARGs/cell)") +
guides(fill=guide_legend(title="ARG type")) +
# scale_y_continuous(expand = c(0, 0)) + # y start at 0
theme(axis.text.x = element_text(size = 10, angle = 90, hjust=1),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
strip.text = element_text(size=10.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
# panel.grid.major = element_blank(), #remove major gridlines
# panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) + #transparent legend bg
scale_fill_manual(values=c("#8DD3C7","#FFFFB3","#BEBADA","#FB8072","#80B1D3",
"#FDB462","#B3DE69","#FCCDE5", "#FFED6F","#BC80BD",
"#D9D9D9"))
print(p)
# Statistic
gather_arg_type <- gather_arg_type %>% group_by(sample) %>%
mutate(sum = sum(copy_per_cell))
gather_arg_type <- gather_arg_type %>% select(sample,sample_type,sum) %>% unique()
kruskal.test(sum ~ sample_type, data = gather_arg_type)
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "none")
# Import library
library(tidyverse)
library(stringr)
library(tibble)
# Read ARG_type file
arg_type <- read.table("../../airborne_arg_uwtp_result/args_oap/ARG/stage_two_output/normalized_cell.type.txt",
header = TRUE, sep = "")
# Preview raw data
gather_arg_type <- gather(arg_type, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
## Add sample type column
gather_arg_type$sample_type <- NA
for (i in 1:nrow(gather_arg_type)) {
if (grepl("^AT",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "AT"
}
if (grepl("^ARP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ARP"
}
if (grepl("^ODP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ODP"
}
}
# Statastic
arg_sum <- gather_arg_type %>% group_by(sample) %>% mutate(sum = sum(copy_per_cell))
arg_sum <- arg_sum %>% group_by(sample_type) %>% mutate(mean = mean(sum))
arg_sum <- arg_sum %>% group_by(sample_type)%>% mutate(sd = sd(sum)) %>%
select(sample_type, mean, sd) %>% unique()
## Visualization
gather_arg_type$sample_type <- factor(gather_arg_type$sample_type, levels = c("AT", "ARP", "ODP"),
labels = c(expression(Aeration~tank),
expression(Aeration~tank~PM[2.5]),
expression(Outdoor~PM[2.5])
)) # Change facet title
ggplot(gather_arg_type, aes(x = sample, y = copy_per_cell, fill = type)) +
geom_bar(stat="identity") +
facet_wrap(~sample_type, scales = "free_x", labeller = label_parsed) +
theme_bw() +
xlab("") + ylab("Relative abundance (ARGs/cell)")
# Classify minimum ARG type to others
average_arg <- gather_arg_type %>%
group_by(sample_type, type) %>%
summarise_at(vars(copy_per_cell), funs(mean)) # Calculate mean value of ARG type in sample type
arg_order <- unique(
average_arg[
order(average_arg$copy_per_cell,
decreasing = T),
]$type) # unique ARG type order
arg_type <- arg_type %>%
arrange(factor(type, levels = arg_order)) # Order ARG type in spread format
## Convert the first column into row name
rownames(arg_type) <- arg_type[,1]
arg_type[,1] <- NULL
## Calculate others by summing  minimum arg
other_arg <- colSums(arg_type[11:26, ])
arg_type <- rbind(arg_type, other_arg)
rownames(arg_type)[rownames(arg_type) == "27"] <- "others"
arg_type <- arg_type[-(11:26),] # delete minimum arg type
rownames(arg_type) <- str_to_title(rownames(arg_type)) # Covert first letter to uppercase
arg_type <- tibble::rownames_to_column(arg_type, "type") # Convert row name back to first column
# Plot
## Transform to gather format
gather_arg_type <- gather(arg_type, key = "sample", value = "copy_per_cell",
ARP1:ODP5)
## Add sample type column
gather_arg_type$sample_type <- NA
for (i in 1:nrow(gather_arg_type)) {
if (grepl("^AT",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "AT"
}
if (grepl("^ARP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ARP"
}
if (grepl("^ODP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ODP"
}
}
## Change facet title
gather_arg_type$sample_type <- factor(gather_arg_type$sample_type, levels = c("AT", "ARP", "ODP"),
labels = c(expression(Aeration~tank),
expression(Aeration~tank~PM[2.5]),
expression(Outdoor~PM[2.5])
))
## Change specific ARG type
gather_arg_type$type[gather_arg_type$type == "Macrolide-Lincosamide-Streptogramin"] <- "MLS"
gather_arg_type$type[gather_arg_type$type == "Beta_lactam"] <- "Beta-lactam"
## Order ARG type
gather_arg_type$type <- factor(gather_arg_type$type,
levels = c("Multidrug", "Sulfonamide",
"MLS","Aminoglycoside",
"Tetracycline", "Rifamycin",
"Beta-lactam", "Bacitracin",
"Polymyxin", "Chloramphenicol",
"Others"))
## ggplot
p <- ggplot(gather_arg_type, aes(x = sample, y = copy_per_cell, fill = type)) +
geom_bar(stat="identity") +
facet_wrap(~sample_type, scales = "free_x", labeller = label_parsed) +
theme_bw() +
xlab("") + ylab("Relative abundance (ARGs/cell)") +
guides(fill=guide_legend(title="ARG type")) +
# scale_y_continuous(expand = c(0, 0)) + # y start at 0
theme(axis.text.x = element_text(size = 10, angle = 90, hjust=1),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
strip.text = element_text(size=10.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
# panel.grid.major = element_blank(), #remove major gridlines
# panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) + #transparent legend bg
scale_fill_manual(values=c("#8DD3C7","#FFFFB3","#BEBADA","#FB8072","#80B1D3",
"#FDB462","#B3DE69","#FCCDE5", "#FFED6F","#BC80BD",
"#D9D9D9"))
print(p)
ggsave("ARG_type_cell.png", p,
path = "../../airborne_arg_uwtp_result/Figure/ARG",
width = 7, height = 5,
units = "in", bg='transparent') # save to png format
# Import library
library(tidyverse)
library(circlize)
library(RColorBrewer)
# Read ARG_type file
arg_type <- read.table("../../airborne_arg_uwtp_result/args_oap/ARG/stage_two_output/normalized_cell.type.txt",
header = TRUE, sep = "")
# gather df
gather_arg_type <- gather(arg_type, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
# Add sample type column
gather_arg_type$sample_type <- gather_arg_type$sample
gather_arg_type$sample_type <- gsub("1|2|3|4|5","",gather_arg_type$sample_type)
# Calculate average abundance per sample type
gather_arg_type <- gather_arg_type %>% group_by(type, sample_type) %>%
mutate(mean = mean(copy_per_cell)) %>%
select(!(sample)) %>%
select(!(copy_per_cell)) %>%
unique()
# Calculate mean value and order of ARG type in all sample
average_arg <- gather_arg_type %>% group_by(type) %>% summarize(average =  mean(mean))
arg_order <- average_arg[order(average_arg$average, decreasing = T),]$type
# Spread df
arg_circos <- gather_arg_type %>% spread(key = sample_type, value = mean)
# Order ARG type
arg_circos <- arg_circos %>%
arrange(factor(type, levels = arg_order))
# Convert to dataframe
arg_circos <- as.data.frame(arg_circos)
# First column as row name
row.names(arg_circos) <- arg_circos$type
arg_circos <- arg_circos[,-1]
# Convert to matrix
arg_circos<- as.matrix(arg_circos)
# Calculate others ARG type
Others <- colSums(arg_circos[11:26, ])
arg_circos <- rbind(arg_circos, Others)
# Delete minimum arg type
arg_circos <- arg_circos[-(11:26),]
# Covert first letter to uppercase
rownames(arg_circos) <- str_to_title(rownames(arg_circos))
# Change specific ARG type
row.names(arg_circos)[3] <- "MLS"
row.names(arg_circos)[6] <- "Beta-lactam"
# Change column order
arg_circos <- arg_circos[, c("AT", "ARP", "ODP")]
# # Convert abundance to relative abundance
arg_circos <- apply(arg_circos,-1, function(x) x/sum(x))
View(arg_circos)
# Set color
display.brewer.all()
brewer.pal(n=6,name="Set2")
grid.col = c("#8DD3C7","#FFFFB3","#BEBADA",
"#FB8072","#80B1D3","#FDB462",
"#B3DE69","#FCCDE5","#FFED6F",
"#BC80BD","#D9D9D9", # ARG type
"#FBB4AE","#B3CDE3","#CCEBC5" # sample type
)
# Save
#pdf("../../airborne_arg_uwtp_result/Figure/ARG/ARG_circos.pdf")
graphics.off() # Reset figure window
circos.par(canvas.xlim = c(-0.5, 0.5), canvas.ylim = c(-1.5, 1))
chordDiagram(arg_circos, annotationTrack = "grid",
preAllocateTracks = 1, grid.col = grid.col,
directional = 1, big.gap = 10, scale = 0)
circos.trackPlotRegion(track.index = 1,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(cex = 0.8,mean(xlim), ylim[1] + .5, sector.name, facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
circos.axis(h = "top", labels.cex = 0.4, major.tick.percentage = 1, sector.index = sector.name, track.index = 2)
}, bg.border = NA)
# Convert abundance to relative abundance
arg_circos <- apply(arg_circos,-1, function(x) x/sum(x))
# Save
#pdf("../../airborne_arg_uwtp_result/Figure/ARG/ARG_circos.pdf")
graphics.off() # Reset figure window
pdf("../../airborne_arg_uwtp_result/Figure/ARG/ARG_relative_circos.pdf")
circos.par(canvas.xlim = c(-0.5, 0.5), canvas.ylim = c(-1.5, 1))
chordDiagram(arg_circos, annotationTrack = "grid",
preAllocateTracks = 1, grid.col = grid.col,
directional = 1, big.gap = 10, scale = 0)
circos.trackPlotRegion(track.index = 1,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(cex = 0.8,mean(xlim), ylim[1] + .5, sector.name, facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
circos.axis(h = "top", labels.cex = 0.4, major.tick.percentage = 1, sector.index = sector.name, track.index = 2)
}, bg.border = NA)
dev.off()
