source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
View(arg_subtype)
# Preview raw data
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
# Preview raw data
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
# Read ARG_type file (Something wrong with read.table, so read by )
arg_subtype <- read.xlsx("D:/ARG_project/Shell/args_oap/stage_two_output/normalized_cell.subtype.xlsx",
sheet = 1)
# Preview raw data
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
View(arg_subtype)
View(gather_arg_subtype)
gather_arg_subtype[order(gather_arg_subtype$copy_per_cell, decreasing = T)
gather_arg_subtype[order(gather_arg_subtype$copy_per_cell, decreasing = T)]
order(gather_arg_subtype$copy_per_cell, decreasing = T)
gather_arg_subtype[order(gather_arg_subtype$copy_per_cell, decreasing = T),]
order(gather_arg_subtype$copy_per_cell, decreasing = T)
gather_arg_subtype[order(gather_arg_subtype$copy_per_cell, decreasing = T),]
tmp <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell, decreasing = T),]
View(tmp)
unique(tmp[,1])
head(unique(tmp[,1]))
unique(tmp[,1])[10]
unique(tmp[,1])[1:10]
unique(tmp[,1])[1:100]
top100_subtype<- unique(gather_arg_subtype_order[,1])[1:100]
gather_arg_subtype_order <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell, decreasing = T),]
top100_subtype<- unique(gather_arg_subtype_order[,1])[1:100]
top100_subtype
##
filter(arg_subtype, subtype == top100_subtype)
##
filter(arg_subtype, subtype == top100_subtype)
top100_subtype
##
tmp <- filter(arg_subtype, subtype == top100_subtype)
View(tmp)
##
tmp <- filter(arg_subtype, subtype == top100_subtype)
top_subtype<- unique(gather_arg_subtype_order[,1])[1:10] # Select top100 subtype
##
tmp <- filter(arg_subtype, subtype == top_subtype)
top_subtype
##
tmp <- filter(arg_subtype, subtype = top_subtype)
##
tmp <- filter(arg_subtype, subtype == top_subtype)
View(tmp)
top_subtype<- unique(gather_arg_subtype_order)[1:10] # Select top100 subtype
top_subtype<- unique(gather_arg_subtype_order[,1])[1:10] # Select top100 subtype
top_subtype
##
tmp <- filter(arg_subtype, subtype in top_subtype)
top_subtype<- c(unique(gather_arg_subtype_order[,1])[1:10]) # Select top100 subtype
top_subtype
##
tmp <- filter(arg_subtype, subtype == top_subtype)
##
tmp <- filter(arg_subtype, subtype == top_subtype)
top_subtype<- unique(gather_arg_subtype_order[,1])[1:10] # Select top100 subtype
top_subtype
##
tmp <- filter(arg_subtype, subtype %in% top_subtype)
top_subtype<- unique(gather_arg_subtype_order[,1])[1:100] # Select top100 subtype
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:100] # Select top100 subtype
##
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list)
View(top_subtype)
sum(top_subtype[,2])
sum(top_subtype[,2])/sum(gather_arg_subtype[,2])
sum(top_subtype[,2])/sum(arg_subtype[,2])
[2:16]
[2:16]
for (i in 2:16) {
print("test", sum(top_subtype[,i])/sum(arg_subtype[,i]))
}
for (i in 2:16) {
print(paste('i: ',sum(top_subtype[,i])/sum(arg_subtype[,i])))
}
print(paste(i, ': ',sum(top_subtype[,i])/sum(arg_subtype[,i])))
for (i in 2:16) {
print(paste(i, ': ',sum(top_subtype[,i])/sum(arg_subtype[,i])))
}
print(paste(i, ': ',sum(top_subtype[,i])/sum(arg_subtype[,i]), sep = ""))
for (i in 2:16) {
print(paste(i, ': ',sum(top_subtype[,i])/sum(arg_subtype[,i]), sep = ""))
}
print(paste(top_subtype[,i], ': ',sum(top_subtype[,i])/sum(arg_subtype[,i]), sep = ""))
for (i in 2:16) {
print(paste(top_subtype[,i], ': ',sum(top_subtype[,i])/sum(arg_subtype[,i]), sep = ""))
}
for (i in 2:16) {
print(paste(top_subtype[1,i], ': ',sum(top_subtype[,i])/sum(arg_subtype[,i]), sep = ""))
}
sum(top_subtype[,2])/sum(arg_subtype[,2])
for (i in 2:16) {
print(paste(top_subtype[1,i], ': ',sum(top_subtype[,i])/sum(arg_subtype[,i]), sep = ""))
}
for (i in 2:16) {
print(paste(colnames(top_subtype), ': ',sum(top_subtype[,i])/sum(arg_subtype[,i]), sep = ""))
}
print(paste(colnames(top_subtype[2:16]), ': ',sum(top_subtype[,i])/sum(arg_subtype[,i]), sep = ""))
top_subtype[2:16]
colnames(top_subtype)
colnames(top_subtype)[2:16]
for (i in 2:16) {
print(paste(colnames(top_subtype)[2:16], ': ',sum(top_subtype[,i])/sum(arg_subtype[,i]), sep = ""))
}
colnames(top_subtype)[2:16]
sum(top_subtype[,i])
for (i in 2:16) {
print(paste(colnames(top_subtype)[2:16],': ',sum(top_subtype[,i])/sum(arg_subtype[,i]), sep = ""))
}
for (i in 2:3) {
print(paste(colnames(top_subtype)[2:16],': ',
sum(top_subtype[,i])/sum(arg_subtype[,i]), sep = ""))
}
for (i in 2) {
print(paste(colnames(top_subtype)[2:16],': ',
sum(top_subtype[,i])/sum(arg_subtype[,i]), sep = ""))
}
for (i in c(2:16)) {
print(paste(colnames(top_subtype)[2:16],': ',
sum(top_subtype[,i])/sum(arg_subtype[,i]), sep = ""))
}
sum(top_subtype[,2])/sum(arg_subtype[,2])
top_subtype[,1]
top_subtype[,2]
for (i in c(2:16)) {
print(i))
for (i in c(2:16)) {
print(i)
}
for (i in 2:16) {
print(i)
}
for (i in c(2:16)) {
paste(colnames(top_subtype)[2:16],': ',
sum(top_subtype[,i])/sum(arg_subtype[,i]), sep = "")
}
colnames(top_subtype)[2:16]
print(colnames(top_subtype)[2:16])
for (i in c(2:16)) {
print(colnames(top_subtype)[2:16])
}
colnames(top_subtype)[2]
for (i in c(2:16)) {
print(paste(colnames(top_subtype)[i],': ',
sum(top_subtype[,i])/sum(arg_subtype[,i]), sep = ""))
}
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:150] # Select top100 subtype
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
for (i in c(2:16)) {
print(paste(colnames(top_subtype)[i],': ',
sum(top_subtype[,i])/sum(arg_subtype[,i]),
sep = ""))
} # Print top ARG percentage in each sample
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:100] # Select top100 subtype
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
for (i in c(2:16)) {
print(paste(colnames(top_subtype)[i],': ',
sum(top_subtype[,i])/sum(arg_subtype[,i]),
sep = ""))
} # Print top ARG percentage in each sample
# Change the first column to row name
row.names(top_subtype) <- top_subtype[,1]
top_subtype <- top_subtype[,-1]
#Plot
## Convert table to matrix
arg_subtype <- as.matrix(arg_subtype)
#Plot
## Convert table to matrix
arg_subtype <- as.matrix(arg_subtype)
pheatmap(arg_subtype)
# Import library
library(tidyverse)
library(stringr)
library(tibble)
library(openxlsx)
library(pheatmap)
pheatmap(top_subtype)
# Split subtype by "_"
seperate(top_subtype, col = subtype, sep = "_")
# Split subtype by "_"
separate(top_subtype, col = subtype, sep = "_")
# Import library
library(tidyverse)
library(stringr)
library(tibble)
library(openxlsx)
library(pheatmap)
# Read ARG_type file (Something wrong with read.table, so read by )
arg_subtype <- read.xlsx("D:/ARG_project/Shell/args_oap/stage_two_output/normalized_cell.subtype.xlsx",
sheet = 1)
# Preview raw data
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
gather_arg_subtype_order <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell,
decreasing = T),] # Order by abundance
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:100] # Select top100 subtype
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
for (i in c(2:16)) {
print(paste(colnames(top_subtype)[i],': ',
sum(top_subtype[,i])/sum(arg_subtype[,i]),
sep = ""))
} # Print top ARG percentage in each sample
# Split subtype by "_"
separate(top_subtype, col = subtype, sep = "_")
# Split subtype by "_"
separate(top_subtype, col = subtype, into = type,sep = "_")
# Split subtype by "_"
top_subtype %>% separate(c(type,subtype), sep = "_")
# Split subtype by "_"
top_subtype %>% separate(c("type","subtype"), sep = "_")
# Split subtype by "_"
top_subtype %>% separate(c("subtype"), sep = "_")
# Split subtype by "_"
top_subtype %>% separate(subtype, c("type","subtype"), sep = "_")
# Split subtype by "_"
tmp <- top_subtype %>% separate(subtype, c("type","subtype"), sep = "_")
View(tmp)
# Import library
library(tidyverse)
library(stringr)
library(tibble)
library(openxlsx)
library(pheatmap)
# Read ARG_type file (Something wrong with read.table, so read by )
arg_subtype <- read.xlsx("D:/ARG_project/Shell/args_oap/stage_two_output/normalized_cell.subtype.xlsx",
sheet = 1)
# Preview raw data
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
gather_arg_subtype_order <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell,
decreasing = T),] # Order by abundance
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:100] # Select top100 subtype
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
for (i in c(2:16)) {
print(paste(colnames(top_subtype)[i],': ',
sum(top_subtype[,i])/sum(arg_subtype[,i]),
sep = ""))
} # Print top ARG percentage in each sample
# Split subtype by "_"
tmp <- top_subtype %>% separate(subtype, c("type","subtype"), sep = "__")
View(tmp)
# Split subtype by "_"
top_subtype <- top_subtype %>% separate(subtype, c("type","subtype"), sep = "__")
top_subtype <- top_subtype %>%
separate(subtype, c("type","subtype"),
sep = "__") # Split subtype by "_"
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
# Import library
library(tidyverse)
library(stringr)
library(tibble)
library(openxlsx)
library(pheatmap)
# Read ARG_type file (Something wrong with read.table, so read by )
arg_subtype <- read.xlsx("D:/ARG_project/Shell/args_oap/stage_two_output/normalized_cell.subtype.xlsx",
sheet = 1)
# Preview raw data
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
gather_arg_subtype_order <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell,
decreasing = T),] # Order by abundance
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:100] # Select top100 subtype
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
for (i in c(2:16)) {
print(paste(colnames(top_subtype)[i],': ',
sum(top_subtype[,i])/sum(arg_subtype[,i]),
sep = ""))
} # Print top ARG percentage in each sample
top_subtype <- top_subtype %>%
separate(subtype, c("type","subtype"),
sep = "__") # Split subtype by "_"
# Change the first column to row name
row.names(top_subtype) <- top_subtype[,1]
View(top_subtype)
top_subtype[,!1]
top_subtype[,!1]
top_subtype ![,1]
top_subtype[,-1]
tmp <- top_subtype[,-1]
View(tmp)
top_subtype <- top_subtype[,-1] # Remove ARG type
# Change the first column to row name
row.names(top_subtype) <- top_subtype[,1]
top_subtype <- top_subtype[,-1]
#Plot
## Convert table to matrix
top_subtype <- as.matrix(top_subtype)
pheatmap(top_subtype)
log10(top_subtype)
log_top_subtype <- log10(top_subtype)
pheatmap(log_top_subtype)
View(log_top_subtype)
log_top_subtype[log_top_subtype == 0] <- NA
log_top_subtype[log_top_subtype == 0] <- NA
log_top_subtype[log_top_subtype == -Inf] <- NA
pheatmap(log_top_subtype)
pheatmap(t(log_top_subtype))
annotation_row = data.frame(
GeneClass = factor(rep(c("Path1", "Path2", "Path3"), c(10, 4, 6))))
rownames(annotation_row) = paste("Gene", 1:20, sep = "")
View(annotation_row)
col.names(log_top_subtype)
row.names(log_top_subtype)
colnames(log_top_subtype)
rep(c("ARP", "AT", "ODP"), 5)
annotation_row = data.frame(
sample_class = factor(rep(c("ARP", "AT", "ODP"), c(5, 5, 5))))
rownames(annotation_row) = colnames(log_top_subtype
rownames(annotation_row) = colnames(log_top_subtype)
pheatmap(t(log_top_subtype), annotation_col = annotation_col)
pheatmap(t(log_top_subtype), annotation_col = annotation_row)
pheatmap(t(log_top_subtype), annotation_row = annotation_row)
pheatmap(t(log_top_subtype))
pheatmap(t(log_top_subtype), annotation_row = annotation_row, border_color = "black")
pheatmap(t(log_top_subtype), annotation_row = annotation_row, border_color = NA)
pheatmap(t(log_top_subtype), annotation_row = annotation_row, border_color = "NA")
pheatmap(t(log_top_subtype), annotation_row = annotation_row)
pheatmap(t(log_top_subtype), annotation_row = annotation_row, , border=TRUE)
pheatmap(t(log_top_subtype), annotation_row = annotation_row, border=TRUE)
pheatmap(t(log_top_subtype), annotation_row = annotation_row, border=TRUE)
pheatmap(t(log_top_subtype),  border=TRUE)
pheatmap(t(log_top_subtype),  border=FALSE)
pheatmap(t(log_top_subtype), annotation_row = annotation_row, border=TRUE)
pheatmap(t(log_top_subtype), annotation_row = annotation_row, border=TRUE,  border_color = "black")
