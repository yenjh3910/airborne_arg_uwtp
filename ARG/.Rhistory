header = TRUE, sep = "")
# Preview raw data
gather_arg_type <- gather(arg_type, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
## Add sample type column
gather_arg_type$sample_type <- NA
for (i in 1:nrow(gather_arg_type)) {
if (grepl("^AT",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "AT"
}
if (grepl("^ARP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ARP"
}
if (grepl("^ODP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ODP"
}
}
# Statastic
arg_sum <- gather_arg_type %>% group_by(sample) %>% mutate(sum = sum(copy_per_cell))
arg_sum <- arg_sum %>% group_by(sample_type) %>% mutate(mean = mean(sum))
arg_sum <- arg_sum %>% group_by(sample_type)%>% mutate(sd = sd(sum)) %>%
select(sample_type, mean, sd) %>% unique()
## Visualization
gather_arg_type$sample_type <- factor(gather_arg_type$sample_type, levels = c("AT", "ARP", "ODP"),
labels = c(expression(Aeration~tank),
expression(Aeration~tank~PM[2.5]),
expression(Outdoor~PM[2.5])
)) # Change facet title
ggplot(gather_arg_type, aes(x = sample, y = copy_per_cell, fill = type)) +
geom_bar(stat="identity") +
facet_wrap(~sample_type, scales = "free_x", labeller = label_parsed) +
theme_bw() +
xlab("") + ylab("Relative abundance (ARGs/cell)")
# Classify minimum ARG type to others
average_arg <- gather_arg_type %>%
group_by(sample_type, type) %>%
summarise_at(vars(copy_per_cell), funs(mean)) # Calculate mean value of ARG type in sample type
arg_order <- unique(
average_arg[
order(average_arg$copy_per_cell,
decreasing = T),
]$type) # unique ARG type order
arg_type <- arg_type %>%
arrange(factor(type, levels = arg_order)) # Order ARG type in spread format
## Convert the first column into row name
rownames(arg_type) <- arg_type[,1]
arg_type[,1] <- NULL
## Calculate others by summing  minimum arg
other_arg <- colSums(arg_type[11:26, ])
# Import library
library(tidyverse)
library(stringr)
library(tibble)
library(FSA)
# Read ARG_type file
arg_type <- read.table("../../airborne_arg_uwtp_result/args_oap/ARG/stage_two_output/normalized_cell.type.txt",
header = TRUE, sep = "")
# Preview raw data
gather_arg_type <- gather(arg_type, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
View(arg_type)
View(gather_arg_type)
View(gather_arg_type)
source("~/Documents/NTU_research/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
View(gather_arg_type)
View(arg_type)
# Read ARG_type file
arg_type <- read.table("../../airborne_arg_uwtp_result/args_oap/ARG/stage_two_output/normalized_cell.type.txt",
header = TRUE, sep = "")
# Preview raw data
gather_arg_type <- gather(arg_type, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
## Add sample type column
gather_arg_type$sample_type <- NA
for (i in 1:nrow(gather_arg_type)) {
if (grepl("^AT",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "AT"
}
if (grepl("^ARP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ARP"
}
if (grepl("^ODP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ODP"
}
}
View(arg_sum)
View(gather_arg_type)
type_percentage <- gather_arg_type # Use for calculation of type percentange finally
source("~/Documents/NTU_research/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
View(type_percentage)
# Calculate mean abundance between sample type
type_percentage %>% group_by(sample_type,type) %>% summarise(mean(copy_per_cell))
# Calculate mean abundance between sample type
type_percentage %>% group_by(sample_type,type) %>%
summarise(abundance = mean(copy_per_cell))
# Calculate mean abundance between sample type
type_percentage %>% group_by(sample_type,type) %>%
summarise(abundance = mean(copy_per_cell)) %>%
summarise(sample_type_sum = sum(abundance))
# Calculate mean abundance between sample type
type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = mean(copy_per_cell)) %>%
summarise(sample_type_sum = sum(abundance))
# Calculate mean abundance between sample type
type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = mean(copy_per_cell)) %>%
mutate(sample_type_sum = sum(abundance))
# Calculate mean abundance between sample type
type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = mean(copy_per_cell)) %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance))
# Calculate mean abundance between sample type
t<-type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = mean(copy_per_cell)) %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance))
View(t)
# Calculate mean abundance between sample type
t<-type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = mean(copy_per_cell)) %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance)) %>%
select(!sample) %>% select(!(copy_per_cell))
# Calculate mean abundance between sample type
t<-type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = mean(copy_per_cell)) %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance)) %>%
select(!sample) %>% select(!(copy_per_cell)) %>%
unique()
# Calculate mean abundance between sample type
t<-type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = mean(copy_per_cell)) %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance)) %>%
select(!sample) %>% select(!(copy_per_cell)) %>%
unique() %>%
mutate(percentage = abundance/sample_type_sum)
# Calculate mean abundance between sample type
t<-type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = mean(copy_per_cell)) %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance)) %>%
select(!sample) %>% select(!(copy_per_cell)) %>%
unique() %>%
mutate(percentage = (abundance/sample_type_sum)*100)
# Calculate mean abundance between sample type
final_pecent <- type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = mean(copy_per_cell)) %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance)) %>%
select(!sample) %>% select(!(copy_per_cell)) %>%
unique() %>%
mutate(percentage = (abundance/sample_type_sum)*100)
View(final_pecent)
final_pecent %>% spread(sample_type,percentage)
final_pecent_spread <- final_pecent %>% spread(sample_type,percentage)
View(final_pecent_spread)
final_pecent_spread <- final_pecent %>% spread(sample_type,percentage) %>%
select(!(abundance)) %>% select(!(sample_type))
final_pecent_spread <- final_pecent %>% spread(sample_type,percentage) %>%
select(!(abundance)) %>%
select(!(sample_type_sum))
rownames(final_pecent) <- final_pecent$type
final_pecent_spread <- final_pecent %>% select(!(abundance)) %>%
select(!(sample_type_sum)) %>%
spread(sample_type,percentage) %>%
final_pecent_spread <- final_pecent %>% select(!(abundance)) %>%
select(!(sample_type_sum)) %>%
spread(sample_type,percentage)
# Calculate mean abundance between sample type
final_pecent <- type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = mean(copy_per_cell)) %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance)) %>%
select(!sample) %>% select(!(copy_per_cell)) %>%
unique() %>%
mutate(percentage = (abundance/sample_type_sum)*100)
# Calculate mean abundance between sample type
final_pecent <- type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = sum(copy_per_cell)) %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance)) %>%
select(!sample) %>% select(!(copy_per_cell)) %>%
unique() %>%
mutate(percentage = (abundance/sample_type_sum)*100)
# Calculate mean abundance between sample type
final_pecent <- type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = sum(copy_per_cell)) %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance)) %>%
select(!sample) %>% select(!(copy_per_cell)) %>%
unique() %>%
mutate(percentage = (abundance/sample_type_sum)*100)
View(final_pecent)
# Calculate mean abundance between sample type
final_pecent <- type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = sum(copy_per_cell))
# Calculate mean abundance between sample type
final_pecent <- type_percentage %>% group_by(sample_type,type) %>%
# Calculate mean abundance between sample type
final_pecent <- type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = sum(copy_per_cell)) %>%
select(!(sample)) %>% select(!(copy_per_cell))
# Calculate mean abundance between sample type
final_pecent <- type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = sum(copy_per_cell)) %>%
select(!(sample)) %>% select(!(copy_per_cell))
# Calculate mean abundance between sample type
final_pecent <- type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = sum(copy_per_cell)) %>%
select(!(sample)) %>% select(!(copy_per_cell)) %>%
unique()
# Calculate mean abundance between sample type
final_pecent <- type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = sum(copy_per_cell)) %>%
select(!(sample)) %>% select(!(copy_per_cell)) %>%
unique() %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance))
# Calculate mean abundance between sample type
final_pecent <- type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = sum(copy_per_cell)) %>%
select(!(sample)) %>% select(!(copy_per_cell)) %>%
unique() %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance)) %>%
mutate(percentage = (abundance/sample_type_sum)*100)
final_pecent_spread <- final_pecent %>% select(!(abundance)) %>%
select(!(sample_type_sum)) %>%
spread(sample_type,percentage)
# Export to csv
write.csv(final_pecent_spread,"../../airborne_arg_uwtp_result/args_oap/ARG/ARG_type_percentage.csv")
# Export to csv
write.csv(final_pecent_spread,
"../../airborne_arg_uwtp_result/args_oap/ARG/ARG_type_percentage.csv",
row.names = FALSE)
# Calculate mean abundance between sample type
type_percentage$type <- str_to_title(type_percentage$type) # Covert first letter to uppercase
## Change specific ARG type
type_percentage$type[type_percentage$type == "Macrolide-Lincosamide-Streptogramin"] <- "MLS"
type_percentage$type[type_percentage$type == "Beta_lactam"] <- "Beta-lactam"
# Calculate mean abundance between sample type
## Covert first letter to uppercase
type_percentage$type <- str_to_title(type_percentage$type)
## Change specific ARG type
type_percentage$type[type_percentage$type == "Macrolide-Lincosamide-Streptogramin"] <- "MLS"
type_percentage$type[type_percentage$type == "Beta_lactam"] <- "Beta-lactam"
# Calculation
final_pecent <- type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = sum(copy_per_cell)) %>%
select(!(sample)) %>% select(!(copy_per_cell)) %>%
unique() %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance)) %>%
mutate(percentage = (abundance/sample_type_sum)*100)
final_pecent_spread <- final_pecent %>% select(!(abundance)) %>%
select(!(sample_type_sum)) %>%
spread(sample_type,percentage)
View(final_pecent_spread)
# Calculate mean abundance between sample type
## Covert first letter to uppercase
type_percentage$type <- str_to_title(type_percentage$type)
## Change specific ARG type
type_percentage$type[type_percentage$type == "Macrolide-Lincosamide-Streptogramin"] <- "MLS"
type_percentage$type[type_percentage$type == "Beta_lactam"] <- "Beta-lactam"
# Calculation
final_pecent <- type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = sum(copy_per_cell)) %>%
select(!(sample)) %>% select(!(copy_per_cell)) %>%
unique() %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance)) %>%
mutate(percentage = (abundance/sample_type_sum)*100)
final_pecent_spread <- final_pecent %>% select(!(abundance)) %>%
select(!(sample_type_sum)) %>%
spread(sample_type,percentage)
# Calculate mean abundance between sample type
## Covert first letter to uppercase
type_percentage$type <- str_to_title(type_percentage$type)
# Calculate mean abundance between sample type
## Covert first letter to uppercase
type_percentage$type <- str_to_title(type_percentage$type)
type_percentage <- gather_arg_type # Use for calculation of type percentange finally
# Import library
library(tidyverse)
library(stringr)
library(tibble)
library(FSA)
# Read ARG_type file
arg_type <- read.table("../../airborne_arg_uwtp_result/args_oap/ARG/stage_two_output/normalized_cell.type.txt",
header = TRUE, sep = "")
# Preview raw data
gather_arg_type <- gather(arg_type, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
## Add sample type column
gather_arg_type$sample_type <- NA
for (i in 1:nrow(gather_arg_type)) {
if (grepl("^AT",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "AT"
}
if (grepl("^ARP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ARP"
}
if (grepl("^ODP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ODP"
}
}
type_percentage <- gather_arg_type # Use for calculation of type percentange finally
# Statastic
arg_sum <- gather_arg_type %>% group_by(sample) %>% mutate(sum = sum(copy_per_cell))
# Calculate mean abundance between sample type
## Covert first letter to uppercase
type_percentage$type <- str_to_title(type_percentage$type)
## Change specific ARG type
type_percentage$type[type_percentage$type == "Macrolide-Lincosamide-Streptogramin"] <- "MLS"
type_percentage$type[type_percentage$type == "Beta_lactam"] <- "Beta-lactam"
type_percentage$type <- gsub("_"," ",type_percentage$type)
# Calculation
final_pecent <- type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = sum(copy_per_cell)) %>%
select(!(sample)) %>% select(!(copy_per_cell)) %>%
unique() %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance)) %>%
mutate(percentage = (abundance/sample_type_sum)*100)
final_pecent_spread <- final_pecent %>% select(!(abundance)) %>%
select(!(sample_type_sum)) %>%
spread(sample_type,percentage)
View(final_pecent_spread)
type_percentage$type[type_percentage$type == "Tetracenomycin c"] <- "Tetracenomycin C"
# Calculation
final_pecent <- type_percentage %>% group_by(sample_type,type) %>%
mutate(abundance = sum(copy_per_cell)) %>%
select(!(sample)) %>% select(!(copy_per_cell)) %>%
unique() %>%
ungroup() %>%
group_by(sample_type) %>%
mutate(sample_type_sum = sum(abundance)) %>%
mutate(percentage = (abundance/sample_type_sum)*100)
final_pecent_spread <- final_pecent %>% select(!(abundance)) %>%
select(!(sample_type_sum)) %>%
spread(sample_type,percentage)
final_pecent_spread <- final_pecent_spread[,c(1,3,2,4)]
# Export to csv
write.csv(final_pecent_spread,
"../../airborne_arg_uwtp_result/args_oap/ARG/ARG_type_percentage.csv",
row.names = FALSE)
source("~/Documents/NTU_research/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
# Kruskal-Wallis Test
kruskal.test(sum ~ sample_type, data = gather_arg_type)
# Kruskal-Wallis Test
kruskal.test(sum ~ sample_type, data = gather_arg_type)
# Post hoc of Kruskal-Wallis Test (DunnTest)
dunnTest(sum ~ sample_type, data=gather_arg_type, method="bonferroni")
# # Mann Whitney U Test (Wilcoxon Rank Sum Test)
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "bonferroni")
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "holm")
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "BH")
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "BH")
# # Mann Whitney U Test (Wilcoxon Rank Sum Test)
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "bonferroni")
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "holm")
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "BH")
# Post hoc of Kruskal-Wallis Test (DunnTest)
dunnTest(sum ~ sample_type, data=gather_arg_type, method="holm")
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "holm")
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "holm")
# # Mann Whitney U Test (Wilcoxon Rank Sum Test)
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "bonferroni")
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "BH")
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "holm")
# # Mann Whitney U Test (Wilcoxon Rank Sum Test)
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "bonferroni")
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "holm")
# # Mann Whitney U Test (Wilcoxon Rank Sum Test)
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "bonferroni")
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "BH")
# # Mann Whitney U Test (Wilcoxon Rank Sum Test)
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "bonferroni")
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "holm")
pairwise.wilcox.test(gather_arg_type$sum, gather_arg_type$sample_type,
p.adjust.method = "BH")
source("~/Documents/NTU_research/airborne_arg_uwtp/taxonomy/taxa_alpha_diversity.R", echo=TRUE)
# Statistic
## Shannon
kruskal.test(shannon ~ sample_type, data = alpha_diversity)
dunnTest(shannon ~ sample_type, data=alpha_diversity, method="bonferroni")
dunnTest(shannon ~ sample_type, data=alpha_diversity, method="bonferroni")
dunnTest(shannon ~ sample_type, data=alpha_diversity, method="holm")
pairwise.wilcox.test(alpha_diversity$shannon, alpha_diversity$sample_type,
p.adjust.method = "bonferroni")
pairwise.wilcox.test(alpha_diversity$shannon, alpha_diversity$sample_type,
p.adjust.method = "holm")
dunnTest(invsimpson ~ sample_type, data=alpha_diversity, method="bonferroni")
dunnTest(invsimpson ~ sample_type, data=alpha_diversity, method="holm")
pairwise.wilcox.test(alpha_diversity$invsimpson, alpha_diversity$sample_type,
p.adjust.method = "bonferroni")
pairwise.wilcox.test(alpha_diversity$invsimpson, alpha_diversity$sample_type,
p.adjust.method = "holm")
dunnTest(shannon ~ sample_type, data=alpha_diversity, method="holm")
# Import library
library(tidyverse)
library(stringr)
library(tibble)
library(FSA)
# Read ARG_type file
arg_type <- read.table("../../airborne_arg_uwtp_result/args_oap/ARG/stage_two_output/normalized_cell.type.txt",
header = TRUE, sep = "")
# Preview raw data
gather_arg_type <- gather(arg_type, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
## Add sample type column
gather_arg_type$sample_type <- NA
for (i in 1:nrow(gather_arg_type)) {
if (grepl("^AT",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "AT"
}
if (grepl("^ARP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ARP"
}
if (grepl("^ODP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ODP"
}
}
type_percentage <- gather_arg_type # Use for calculation of type percentange finally
# Statastic
arg_sum <- gather_arg_type %>% group_by(sample) %>% mutate(sum = sum(copy_per_cell))
arg_sum <- arg_sum %>% group_by(sample_type) %>% mutate(mean = mean(sum))
arg_sum <- arg_sum %>% group_by(sample_type)%>% mutate(sd = sd(sum)) %>%
select(sample_type, mean, sd) %>% unique()
View(arg_sum)
View(gather_arg_type)
## Visualization
gather_arg_type$sample_type <- factor(gather_arg_type$sample_type, levels = c("AT", "ARP", "ODP"),
labels = c(expression(Aeration~tank),
expression(Aeration~tank~PM[2.5]),
expression(Outdoor~PM[2.5])
)) # Change facet title
ggplot(gather_arg_type, aes(x = sample, y = copy_per_cell, fill = type)) +
geom_bar(stat="identity") +
facet_wrap(~sample_type, scales = "free_x", labeller = label_parsed) +
theme_bw() +
xlab("") + ylab("Relative abundance (ARGs/cell)")
# Read ARG_type file
arg_type <- read.table("../../airborne_arg_uwtp_result/args_oap/ARG/stage_two_output/normalized_cell.type.txt",
header = TRUE, sep = "")
View(arg_type)
# Preview raw data
gather_arg_type <- gather(arg_type, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
## Add sample type column
gather_arg_type$sample_type <- NA
for (i in 1:nrow(gather_arg_type)) {
if (grepl("^AT",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "AT"
}
if (grepl("^ARP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ARP"
}
if (grepl("^ODP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ODP"
}
}
gather_arg_type %>% group_by(sample) %>% summarize(sum(copy_per_cell))
type_percentage <- gather_arg_type # Use for calculation of type percentange finally
# Statastic of sample type
arg_sum <- gather_arg_type %>% group_by(sample) %>% mutate(sum = sum(copy_per_cell))
arg_sum <- arg_sum %>% group_by(sample_type) %>% mutate(mean = mean(sum))
arg_sum <- arg_sum %>% group_by(sample_type)%>% mutate(sd = sd(sum)) %>%
select(sample_type, mean, sd) %>% unique()
## Visualization
gather_arg_type$sample_type <- factor(gather_arg_type$sample_type, levels = c("AT", "ARP", "ODP"),
labels = c(expression(Aeration~tank),
expression(Aeration~tank~PM[2.5]),
expression(Outdoor~PM[2.5])
)) # Change facet title
gather_arg_type %>% group_by(sample) %>% summarize(sum(copy_per_cell)) # Level of ARG in each sample
