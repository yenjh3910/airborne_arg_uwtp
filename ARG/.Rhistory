facet_wrap(~sample_type, scales = "free_x", labeller = label_parsed) +
theme_bw() +
xlab("") + ylab("Relative abundance (ARGs/cell)")
# Classify minimum ARG type to others
average_arg <- gather_arg_type %>%
group_by(sample_type, type) %>%
summarise_at(vars(copy_per_cell), funs(mean)) # Calculate mean value of ARG type in sample type
arg_order <- unique(
average_arg[
order(average_arg$copy_per_cell,
decreasing = T),
]$type) # unique ARG type order
arg_type <- arg_type %>%
arrange(factor(type, levels = arg_order)) # Order ARG type in spread format
## Convert the first column into row name
rownames(arg_type) <- arg_type[,1]
arg_type[,1] <- NULL
## Calculate others by summing  minimum arg
other_arg <- colSums(arg_type[11:26, ])
arg_type <- rbind(arg_type, other_arg)
rownames(arg_type)[rownames(arg_type) == "27"] <- "others"
arg_type <- arg_type[-(11:26),] # delete minimum arg type
rownames(arg_type) <- str_to_title(rownames(arg_type)) # Covert first letter to uppercase
arg_type <- tibble::rownames_to_column(arg_type, "type") # Convert row name back to first column
# Plot
## Transform to gather format
gather_arg_type <- gather(arg_type, key = "sample", value = "copy_per_cell",
ARP1:ODP5)
## Add sample type column
gather_arg_type$sample_type <- NA
for (i in 1:nrow(gather_arg_type)) {
if (grepl("^AT",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "AT"
}
if (grepl("^ARP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ARP"
}
if (grepl("^ODP",gather_arg_type$sample[i])) {
gather_arg_type$sample_type[i] <- "ODP"
}
}
## Change facet title
gather_arg_type$sample_type <- factor(gather_arg_type$sample_type, levels = c("AT", "ARP", "ODP"),
labels = c(expression(Aeration~tank),
expression(Aeration~tank~PM[2.5]),
expression(Outdoor~PM[2.5])
))
## Change specific ARG type
gather_arg_type$type[gather_arg_type$type == "Macrolide-Lincosamide-Streptogramin"] <- "MLS"
gather_arg_type$type[gather_arg_type$type == "Beta_lactam"] <- "Beta-lactam"
## Order ARG type
gather_arg_type$type <- factor(gather_arg_type$type,
levels = c("Multidrug", "Sulfonamide",
"MLS","Aminoglycoside",
"Tetracycline", "Rifamycin",
"Beta-lactam", "Bacitracin",
"Polymyxin", "Chloramphenicol",
"Others"))
## ggplot
p <- ggplot(gather_arg_type, aes(x = sample, y = copy_per_cell, fill = type)) +
geom_bar(stat="identity") +
facet_wrap(~sample_type, scales = "free_x", labeller = label_parsed) +
theme_bw() +
xlab("") + ylab("Relative abundance (ARGs/cell)") +
scale_fill_brewer(palette="Set3") +
guides(fill=guide_legend(title="ARG type")) +
theme(axis.text.x = element_text(size = 10, angle = 90, hjust=1),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
strip.text = element_text(size=10.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') #transparent legend panel)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
print(p)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_cell_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_16S_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_16S_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_ppm_abundance.R", echo=TRUE)
print(p)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_rpkm_abundance.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_type_tpm_abundance.R", echo=TRUE)
# Import library and structure file
library(tidyverse)
library(openxlsx)
# Read ARG_subtype file (Something wrong with read.table, so read by )
arg_subtype <- read.table("D:/ARG_project/Shell/args_oap/ARG/stage_two_output/normalized_cell.subtype.txt",
sep = "\t", header = TRUE, quote = '')
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
single <- read.xlsx("C:/Users/Yen/Desktop/single-component_structure.xlsx",
sheet = 1)
two <- read.xlsx("C:/Users/Yen/Desktop/two-component_structure.xlsx",
sheet = 1)
multi <- read.xlsx("C:/Users/Yen/Desktop/multi-component_structure.xlsx",
sheet = 1)
# Bind structure file
all <- rbind(single, two, multi)
all <- all[,c(3,5)]
colnames(all)[1] <- "subtype"
all <- unique(all)
# Join structure and subtype file
gather_arg_subtype <- left_join(gather_arg_subtype, all, by = "subtype")
spread_arg_subtype <- spread(gather_arg_subtype, key = "sample", value = "copy_per_cell")
# See NA mechanism
na_gene <- gather_arg_subtype[!complete.cases(gather_arg_subtype), ]
na_gene <- spread(na_gene, key = "sample", value = "copy_per_cell")
# Output arg_mechanism file
write.csv(spread_arg_subtype, file = "spread_arg_subtype.csv", quote = FALSE)
# Output arg_mechanism file
write.csv(spread_arg_subtype, file = "spread_arg_subtype.csv",
row.names = FALSE, quote = FALSE,)
View(spread_arg_subtype)
View(spread_arg_subtype)
colnames(spread_arg_subtype)[2] <- "mechasinm"
# See NA mechanism
na_gene <- gather_arg_subtype[!complete.cases(gather_arg_subtype), ]
na_gene <- spread(na_gene, key = "sample", value = "copy_per_cell")
##############################################################
# Output arg_mechanism file and edit manually!!!!
write.csv(spread_arg_subtype, file = "D:/ARG_project/Shell/args_oap/ARG/stage_two_output/arg_mechasism.csv",
row.names = FALSE, quote = FALSE,)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_mechisam.R", echo=TRUE)
source("D:/ARG_project/airborne_arg_uwtp/ARG/ARG_mechisam.R", echo=TRUE)
spread_arg_subtype$mechasinm
unique(spread_arg_subtype$mechasinm)
arg_mechanism <- read.table("D:/ARG_project/Shell/args_oap/ARG/stage_two_output/arg_mechanism.csv",
sep = "\t", header = TRUE, quote = '')
arg_mechanism <- read.xlsx("D:/ARG_project/Shell/args_oap/ARG/stage_two_output/arg_mechanism.csv",
sheet = 1)
arg_mechanism <- read.xlsx("D:/ARG_project/Shell/args_oap/ARG/stage_two_output/arg_mechanism.csv",
sheet = 1)
arg_mechanism <- read.csv("D:/ARG_project/Shell/args_oap/ARG/stage_two_output/arg_mechanism.csv")
View(arg_mechanism)
unique(arg_mechanism$mechasinm)
arg_mechanism$mechasinm == "antibiotic inactivation"
unique(arg_mechanism$mechanism)
unique(arg_mechanism$mechanism)
arg_mechanism <- read.csv("D:/ARG_project/Shell/args_oap/ARG/stage_two_output/arg_mechanism.csv")
unique(arg_mechanism$mechanism)
arg_mechanism$mechanism[arg_mechanism$mechanism == 'antibiotic inactivation'] <- 'Antibiotic inactivation'
unique(arg_mechanism$mechanism)
arg_mechanism$mechanism[arg_mechanism$mechanism == 'Enzymatic inactivation'] <- 'Antibiotic inactivation'
unique(arg_mechanism$mechanism)
arg_mechanism$mechanism[arg_mechanism$mechanism == 'antibiotic efflux'] <- 'Antibiotic efflux'
arg_mechanism$mechanism[arg_mechanism$mechanism == 'Efflux pump'] <- 'Antibiotic efflux'
unique(arg_mechanism$mechanism)
arg_mechanism <- read.csv("D:/ARG_project/Shell/args_oap/ARG/stage_two_output/arg_mechanism.csv")
unique(arg_mechanism$mechanism)
arg_mechanism$mechanism <- str_to_title(arg_mechanism$mechanism)
unique(arg_mechanism$mechanism)
arg_mechanism <- read.csv("D:/ARG_project/Shell/args_oap/ARG/stage_two_output/arg_mechanism.csv")
unique(arg_mechanism$mechanism)
arg_mechanism$mechanism <- str_to_sentence(arg_mechanism$mechanism)
unique(arg_mechanism$mechanism)
arg_mechanism$mechanism[arg_mechanism$mechanism == 'Enzymatic inactivation'] <- 'Antibiotic inactivation'
unique(arg_mechanism$mechanism)
arg_mechanism$mechanism[arg_mechanism$mechanism == 'Efflux pump'] <- 'Antibiotic efflux'
unique(arg_mechanism$mechanism)
arg_mechanism$mechanism[arg_mechanism$mechanism == 'Efflux pump rnd family'] <- 'Antibiotic efflux'
unique(arg_mechanism$mechanism)
arg_mechanism$mechanism[arg_mechanism$mechanism == 'Reduced permeability'] <- 'Reduced permeability to antibiotic'
unique(arg_mechanism$mechanism)
arg_mechanism <- arg_mechanism %>%
separate(subtype, c("type","subtype"),
sep = "__") # Split subtype by "_"
# Transform to gather format
gather_arg_mechanism <- gather(arg_mechanism, key = "sample", value = "copy_per_cell",
ARP1:ODP5)
View(gather_arg_mechanism)
# Add sample type column
gather_arg_mechanism$sample_type <- gather_arg_mechanism$mechanism
gather_arg_mechanism$sample_type <- gsub("1|2|3|4|5","",gather_arg_mechanism$mechanism)
View(gather_arg_mechanism)
# Input back curated arg_mechanism file and adjust mechanism name
arg_mechanism <- read.csv("D:/ARG_project/Shell/args_oap/ARG/stage_two_output/arg_mechanism.csv")
unique(arg_mechanism$mechanism)
arg_mechanism$mechanism <- str_to_sentence(arg_mechanism$mechanism)
arg_mechanism$mechanism[arg_mechanism$mechanism == 'Enzymatic inactivation'] <- 'Antibiotic inactivation'
arg_mechanism$mechanism[arg_mechanism$mechanism == 'Efflux pump'] <- 'Antibiotic efflux'
arg_mechanism$mechanism[arg_mechanism$mechanism == 'Efflux pump rnd family'] <- 'Antibiotic efflux'
arg_mechanism$mechanism[arg_mechanism$mechanism == 'Reduced permeability'] <- 'Reduced permeability to antibiotic'
# Split subtype by "_"
arg_mechanism <- arg_mechanism %>%
separate(subtype, c("type","subtype"), sep = "__")
# Transform to gather format
gather_arg_mechanism <- gather(arg_mechanism, key = "sample", value = "copy_per_cell",
ARP1:ODP5)
# Add sample type column
gather_arg_mechanism$sample_type <- gather_arg_mechanism$sample_type
gather_arg_mechanism$sample_type <- gsub("1|2|3|4|5","",gather_arg_mechanism$sample_type)
# Add sample type column
gather_arg_mechanism$sample_type <- gather_arg_mechanism$sample
gather_arg_mechanism$sample_type <- gsub("1|2|3|4|5","",gather_arg_mechanism$sample_type)
ggplot(gather_arg_mechanism, aes(x = sample_type, y = copy_per_cell, fill = type)) +
geom_bar(stat="identity") +
xlab("") + ylab("Relative abundance (ARGs/cell)") +
scale_fill_brewer(palette="Set3") +
guides(fill=guide_legend(title="ARG type")) +
# scale_y_continuous(expand = c(0, 0)) + # y start at 0
theme(axis.text.x = element_text(size = 10, angle = 90, hjust=1),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
strip.text = element_text(size=10.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
# panel.grid.major = element_blank(), #remove major gridlines
# panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) #transparent legend bg
ggplot(gather_arg_mechanism, aes(x = sample_type, y = copy_per_cell, fill = mechanism)) +
geom_bar(stat="identity") +
xlab("") + ylab("Relative abundance (ARGs/cell)") +
scale_fill_brewer(palette="Set3") +
guides(fill=guide_legend(title="Mechanism")) +
# scale_y_continuous(expand = c(0, 0)) + # y start at 0
theme(axis.text.x = element_text(size = 10, angle = 90, hjust=1),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
strip.text = element_text(size=10.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
# panel.grid.major = element_blank(), #remove major gridlines
# panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) #transparent legend bg
ggplot(gather_arg_mechanism, aes(x = sample_type, y = copy_per_cell, fill = mechanism))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()+
scale_x_discrete(labels=c("AT" = expression(Aeration~tank),
"ARP" = expression(Aeration~tank~PM[2.5]),
"ODP" = expression(Outdoor~PM[2.5])))+
xlab("")+ ylab("Relative abundance (ARGs/cell)")+
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 16),
axis.title = element_text(size = 16),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.key.size = unit(0.8, 'cm'))+
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5"))
library(RColorBrewer)
RColorBrewer::display.brewer.all()
display.brewer.pal(n=12,name="Set3")
brewer.pal(n=12,name="Set3")
ggplot(gather_arg_mechanism, aes(x = sample_type, y = copy_per_cell, fill = mechanism))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()+
scale_x_discrete(labels=c("AT" = expression(Aeration~tank),
"ARP" = expression(Aeration~tank~PM[2.5]),
"ODP" = expression(Outdoor~PM[2.5])))+
xlab("")+ ylab("Relative abundance (ARGs/cell)")+
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 16),
axis.title = element_text(size = 16),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.key.size = unit(0.8, 'cm'))+
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#FFFFB3"))
ggplot(gather_arg_mechanism, aes(x = sample_type, y = copy_per_cell, fill = mechanism))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()+
scale_x_discrete(labels=c("AT" = expression(Aeration~tank),
"ARP" = expression(Aeration~tank~PM[2.5]),
"ODP" = expression(Outdoor~PM[2.5]))) +
xlab("")+ ylab("Relative abundance (ARGs/cell)") +
guides(fill=guide_legend(title="Mechanism")) +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 16),
axis.title = element_text(size = 16),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.key.size = unit(0.8, 'cm'))+
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#FFFFB3"))
## Order
ggather_arg_mechanism$sample_type <- factor(gather_arg_mechanism$sample_type,
levels = c("AT","ARP","ODP"))
## Order
gather_arg_mechanism$sample_type <- factor(gather_arg_mechanism$sample_type,
levels = c("AT","ARP","ODP"))
unique(arg_mechanism$mechanism)
## Order
gather_arg_mechanism$sample_type <- factor(gather_arg_mechanism$sample_type,
levels = c("AT","ARP","ODP"))
gather_arg_mechanism$mechanism <- factor(gather_arg_mechanism$mechanism,
levels = c("Antibiotic efflux",
"Antibiotic inactivation",
"Antibiotic target alteration",
"Antibiotic target protection",
"Antibiotic target replacement",
"Reduced permeability to antibiotic",
"Others"))
ggplot(gather_arg_mechanism, aes(x = sample_type, y = copy_per_cell, fill = mechanism))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()+
scale_x_discrete(labels=c("AT" = expression(Aeration~tank),
"ARP" = expression(Aeration~tank~PM[2.5]),
"ODP" = expression(Outdoor~PM[2.5]))) +
xlab("")+ ylab("Relative abundance (ARGs/cell)") +
guides(fill=guide_legend(title="Mechanism")) +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 16),
axis.title = element_text(size = 16),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.key.size = unit(0.8, 'cm'))+
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#FFFFB3"))
RColorBrewer::display.brewer.all()
display.brewer.pal(n=12,name="Set3")
brewer.pal(n=12,name="Set3")
ggplot(gather_arg_mechanism, aes(x = sample_type, y = copy_per_cell, fill = mechanism))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()+
scale_x_discrete(labels=c("AT" = expression(Aeration~tank),
"ARP" = expression(Aeration~tank~PM[2.5]),
"ODP" = expression(Outdoor~PM[2.5]))) +
xlab("")+ ylab("Relative abundance (ARGs/cell)") +
guides(fill=guide_legend(title="Mechanism")) +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 16),
axis.title = element_text(size = 16),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.key.size = unit(0.8, 'cm'))+
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9"))
gather_arg_mechanism$mechanism <- factor(gather_arg_mechanism$mechanism,
levels = c("Antibiotic efflux",
"Antibiotic inactivation",
"Antibiotic target alteration",
"Antibiotic target replacement",
"Antibiotic target protection",
"Reduced permeability to antibiotic",
"Others"))
ggplot(gather_arg_mechanism, aes(x = sample_type, y = copy_per_cell, fill = mechanism))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()+
scale_x_discrete(labels=c("AT" = expression(Aeration~tank),
"ARP" = expression(Aeration~tank~PM[2.5]),
"ODP" = expression(Outdoor~PM[2.5]))) +
xlab("")+ ylab("Relative abundance (ARGs/cell)") +
guides(fill=guide_legend(title="Mechanism")) +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 16),
axis.title = element_text(size = 16),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.key.size = unit(0.8, 'cm'))+
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9"))
p <- ggplot(gather_arg_mechanism, aes(x = sample_type, y = copy_per_cell, fill = mechanism))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()+
scale_x_discrete(labels=c("AT" = expression(Aeration~tank),
"ARP" = expression(Aeration~tank~PM[2.5]),
"ODP" = expression(Outdoor~PM[2.5]))) +
xlab("")+ ylab("Relative abundance (ARGs/cell)") +
guides(fill=guide_legend(title="Mechanism")) +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 16),
axis.title = element_text(size = 16),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.key.size = unit(0.8, 'cm'))+
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9"))
print(p)
p <- ggplot(gather_arg_mechanism, aes(x = sample_type, y = copy_per_cell, fill = mechanism))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()+
scale_x_discrete(labels=c("AT" = expression(Aeration~tank),
"ARP" = expression(Aeration~tank~PM[2.5]),
"ODP" = expression(Outdoor~PM[2.5]))) +
xlab("")+ ylab("Relative abundance (ARGs/cell)") +
guides(fill=guide_legend(title="Mechanism")) +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 16),
axis.title = element_text(size = 16),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.key.size = unit(0.8, 'cm'),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
legend.background = element_rect(fill='transparent')) + #transparent legend bg)
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9"))
print(p)
ggsave("ARG_mechanism.png", p, path = "D:/ARG_project/Figure/ARG",
width = 7, height = 5, units = "in", bg='transparent') # save to png format
ggsave("ARG_mechanism.png", p, path = "D:/ARG_project/Figure/ARG",
width = 7, height = 2, units = "in", bg='transparent') # save to png format
ggsave("ARG_mechanism.png", p, path = "D:/ARG_project/Figure/ARG",
width = 14, height = 3, units = "in", bg='transparent') # save to png format
ggsave("ARG_mechanism.png", p, path = "D:/ARG_project/Figure/ARG",
width = 14, height = 3, units = "in", bg='transparent') # save to png format
ggsave("ARG_mechanism.png", p, path = "D:/ARG_project/Figure/ARG",
width = 14, height = 3.5, units = "in", bg='transparent') # save to png format
ggsave("ARG_mechanism.png", p, path = "D:/ARG_project/Figure/ARG",
width = 14, height = 3.2, units = "in", bg='transparent') # save to png format
p <- ggplot(gather_arg_mechanism, aes(x = sample_type, y = copy_per_cell, fill = mechanism))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()+
scale_x_discrete(labels=c("AT" = expression(Aeration~tank),
"ARP" = expression(Aeration~tank~PM[2.5]),
"ODP" = expression(Outdoor~PM[2.5]))) +
xlab("")+ ylab("Relative abundance (ARGs/cell)") +
guides(fill=guide_legend(title="Mechanism")) +
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 16),
axis.title = element_text(size = 16),
legend.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.key.size = unit(0.8, 'cm'),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
legend.background = element_rect(fill='transparent')) + #transparent legend bg)
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9"))
print(p)
ggsave("ARG_mechanism.png", p, path = "D:/ARG_project/Figure/ARG",
width = 14, height = 3.2, units = "in", bg='transparent') # save to png format
p <- ggplot(gather_arg_mechanism, aes(x = sample_type, y = copy_per_cell, fill = mechanism))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()+
scale_x_discrete(labels=c("AT" = expression(Aeration~tank),
"ARP" = expression(Aeration~tank~PM[2.5]),
"ODP" = expression(Outdoor~PM[2.5]))) +
xlab("")+ ylab("Relative abundance (ARGs/cell)") +
guides(fill=guide_legend(title="Mechanism")) +
theme(axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title = element_text(size = 20),
legend.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.key.size = unit(0.8, 'cm'),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
legend.background = element_rect(fill='transparent')) + #transparent legend bg)
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9"))
print(p)
ggsave("ARG_mechanism.png", p, path = "D:/ARG_project/Figure/ARG",
width = 14, height = 3.2, units = "in", bg='transparent') # save to png format
p <- ggplot(gather_arg_mechanism, aes(x = sample_type, y = copy_per_cell, fill = mechanism))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()+
scale_x_discrete(labels=c("AT" = expression(Aeration~tank),
"ARP" = expression(Aeration~tank~PM[2.5]),
"ODP" = expression(Outdoor~PM[2.5]))) +
xlab("")+ ylab("Relative abundance (ARGs/cell)") +
guides(fill=guide_legend(title="Mechanism")) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 18),
axis.title = element_text(size = 20),
legend.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.key.size = unit(0.8, 'cm'))
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9"))
print(p)
ggsave("ARG_mechanism.png", p, path = "D:/ARG_project/Figure/ARG",
width = 14, height = 3.2, units = "in") # save to png format
p <- ggplot(gather_arg_mechanism, aes(x = sample_type, y = copy_per_cell, fill = mechanism))+
geom_bar(stat="identity")+
coord_flip()+
theme_bw()+
scale_x_discrete(labels=c("AT" = expression(Aeration~tank),
"ARP" = expression(Aeration~tank~PM[2.5]),
"ODP" = expression(Outdoor~PM[2.5]))) +
xlab("")+ ylab("Relative abundance (ARGs/cell)") +
guides(fill=guide_legend(title="Mechanism")) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 18),
axis.title = element_text(size = 20),
legend.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.key.size = unit(0.8, 'cm'),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
legend.background = element_rect(fill='transparent')) + #transparent legend bg)
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9"))
print(p)
ggsave("ARG_mechanism.png", p, path = "D:/ARG_project/Figure/ARG",
width = 14, height = 3.2, units = "in") # save to png format
