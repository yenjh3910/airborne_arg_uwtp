row.names(top_subtype)) # Adjust subtype name
# Usage pheatmap
top_subtype <- as.matrix(top_subtype) # Convert table to matrix
log_top_subtype <- log10(top_subtype) # log10 conversion
log_top_subtype[log_top_subtype == -Inf] <- NA
## Create annotation label (Note annotation_row was already created as type_subtype)
annotation_row = data.frame(Sample = factor(rep(c("ARP", "AT", "ODP"),
c(5, 5, 5))))
rownames(annotation_row) = colnames(log_top_subtype)
annotation_col <- type_subtype
annotation_col$ARG <- str_to_sentence(annotation_col$ARG) # Covert first letter to uppercase
annotation_col$ARG <- gsub("Macrolide-lincosamide-streptogramin", "MLS", annotation_col$ARG)
row.names(annotation_col) <- gsub("Bifidobacteria intrinsic ileS conferring resistance to mupirocin",
"Bifidobacteria intrinsic ileS", row.names(annotation_col))
# Select color
display.brewer.all()
brewer.pal(3, "Set1") # However, I did not select these color finally
library("ggsci")
ann_colors = list(Sample = c(AT = "#FC4E07", ARP = "#00AFBB", ODP = "#E7B800"))
## Plot
phtmap <- pheatmap(t(log_top_subtype),
annotation_row = annotation_row, annotation_col = annotation_col,
cluster_cols = FALSE, clustering_distance_rows = "euclidean")
### Rotate the cluster
library(seriation)
library(dendextend)
row_dend <- phtmap[[1]]
row_dend <- dendextend::rotate(row_dend, order = c("ODP5","ODP1","ODP3","ODP2","ODP4",
"ARP4","ARP2","ARP3","ARP1","ARP5",
"AT2","AT5","AT1","AT3","AT4") )
p <- pheatmap(t(log_top_subtype),
annotation_row = annotation_row, annotation_col = annotation_col,
cluster_cols = FALSE, annotation_colors = ann_colors,
clustering_distance_rows = "euclidean",
fontsize = 12, fontsize_row = 12, fontsize_col = 10,
cellwidth = 12, cellheight = 17, bg = "transparent",
cluster_rows=as.hclust(row_dend))
print(p)
print(paste(arg_select,'ARGs proportion in all samples:',
total_top_proportion), sep="") # Print top ARG percentage in all sample
View(top_subtype)
source("~/Documents/NTU_research/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
View(gather_arg_subtype_order)
View(gather_arg_subtype)
# Read ARG_subtype file (Something wrong with read.table, so read by )
arg_subtype <- read.xlsx("../../airborne_arg_uwtp_result/args_oap/ARG/stage_two_output/normalized_cell.subtype.xlsx",
sheet = 1)
# Preview raw data
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
View(gather_arg_subtype)
source("~/Documents/NTU_research/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
View(gather_arg_subtype)
# Calculate subtype mean and sd
# Add sample type column
gather_arg_subtype$sample_type <- gather_arg_subtype$sample
gather_arg_subtype$sample_type <- gsub("1|2|3|4|5","",gather_arg_subtype$sample_type)
# mean & sd calculation
gather_arg_subtype %>% group_by(sample_type) %>%
summarise(mean = mean(copy_per_cell)) %>%
sumarrize(sd = sd (copy_per_cell))
# mean & sd calculation
gather_arg_subtype %>% group_by(sample_type) %>%
summarise(mean = mean(copy_per_cell)) %>%
summarize(sd = sd (copy_per_cell))
# mean & sd calculation
gather_arg_subtype %>% group_by(sample_type) %>%
summarise(mean = mean(copy_per_cell)) %>%
summarize(sd = sd(copy_per_cell))
# mean & sd calculation
gather_arg_subtype %>% group_by(sample_type) %>%
mutate(mean = mean(copy_per_cell)) %>%
mutate(sd = sd(copy_per_cell))
# mean & sd calculation
gather_arg_subtype %>% group_by(subtype,sample_type) %>%
mutate(mean = mean(copy_per_cell)) %>%
mutate(sd = sd(copy_per_cell))
# mean & sd calculation
gather_arg_subtype %>% group_by(subtype,sample_type) %>%
mutate(mean = mean(copy_per_cell)) %>%
mutate(sd = sd(copy_per_cell)) %>%
select(subtype, sample_type, mean, sd) %>%
unique()
# mean & sd calculation
subtype_mean_sd <- gather_arg_subtype %>% group_by(subtype,sample_type) %>%
mutate(mean = mean(copy_per_cell)) %>%
mutate(sd = sd(copy_per_cell)) %>%
select(subtype, sample_type, mean, sd) %>%
unique()
# mean & sd calculation
subtype_mean_sd <- gather_arg_subtype %>% group_by(subtype,sample_type) %>%
mutate(mean = mean(copy_per_cell)) %>%
mutate(sd = sd(copy_per_cell)) %>%
select(subtype, sample_type, mean, sd) %>%
unique()
View(subtype_mean_sd)
# Split type-subtype by "_"
subtype_mean_sd <- subtype_mean_sd %>% separate(subtype, c("type","subtype"), sep = "__")
subtype_mean_sd %>% filter(type=="multidrug")
# Transfer to log value
gather_arg_subtype$copy_per_cell <- log10(gather_arg_subtype$copy_per_cell)
# mean & sd calculation
subtype_mean_sd <- gather_arg_subtype %>% group_by(subtype,sample_type) %>%
mutate(mean = mean(copy_per_cell)) %>%
mutate(sd = sd(copy_per_cell)) %>%
select(subtype, sample_type, mean, sd) %>%
unique()
# Split type-subtype by "_"
subtype_mean_sd <- subtype_mean_sd %>% separate(subtype, c("type","subtype"), sep = "__")
# Calculate subtype mean and sd
# Add sample type column
gather_arg_subtype$sample_type <- gather_arg_subtype$sample
gather_arg_subtype$sample_type <- gsub("1|2|3|4|5","",gather_arg_subtype$sample_type)
source("~/Documents/NTU_research/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
subtype_mean_sd$mean <- log10(subtype_mean_sd$mean)
subtype_mean_sd$sd <- log10(subtype_mean_sd$sd)
source("~/Documents/NTU_research/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
subtype_mean_sd$mean <- log10(subtype_mean_sd$mean)
subtype_mean_sd$sd <- log10(subtype_mean_sd$sd)
source("~/Documents/NTU_research/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("~/Documents/NTU_research/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
subtype_mean_sd$mean <- log10(subtype_mean_sd$mean)
subtype_mean_sd$sd <- log10(subtype_mean_sd$sd)
source("~/Documents/NTU_research/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
# ARG_subtype_cell_abundance.R
# Calculate and visualize ARG subtype/cell in each sample
# Import library
library(tidyverse)
library(stringr)
library(tibble)
library(openxlsx)
library(pheatmap)
library(RColorBrewer)
library(scales)
# Read ARG_subtype file (Something wrong with read.table, so read by )
arg_subtype <- read.xlsx("../../airborne_arg_uwtp_result/args_oap/ARG/stage_two_output/normalized_cell.subtype.xlsx",
sheet = 1)
# Preview raw data
gather_arg_subtype <- gather(arg_subtype, key = "sample", value = "copy_per_cell",
ARP1:ODP5) # Transform to gather format
gather_arg_subtype_order <- gather_arg_subtype[order(gather_arg_subtype$copy_per_cell,
decreasing = T),] # Order by abundance
top_subtype_list<- unique(gather_arg_subtype_order[,1])[1:75] #### Select top subtype (Choose)
## View top ARG percentage
top_subtype <- filter(arg_subtype, subtype %in% top_subtype_list) # Assign top subtype dataframe
top_arg_sum <- 0 # Initialization
total_arg_sum <- 0 # Initialization
arg_select<- paste("Top ",length(top_subtype_list),sep = "")
### Print statistic result
for (i in c(2:16)) {
print(paste(arg_select,' ARGs proportion in ',colnames(top_subtype)[i],': ',
label_percent(accuracy = 0.01)(sum(top_subtype[,i])/sum(arg_subtype[,i])),
sep = ""))
top_arg_sum <- sum(top_subtype[,i]) + top_arg_sum
total_arg_sum <- sum(arg_subtype[,i]) + total_arg_sum
} # Print top ARG percentage in each sample
total_top_proportion <- label_percent(accuracy = 0.01)(top_arg_sum/total_arg_sum)
print(paste(arg_select,'ARGs proportion in all samples:',
total_top_proportion), sep="") # Print top ARG percentage in all sample
## Adjust "_" in dataframe
top_subtype <- top_subtype %>%
separate(subtype, c("type","subtype"),
sep = "__") # Split subtype by "_"
top_subtype$type <- gsub("_", " ", top_subtype$type) # Change _ to " " (e.g. beta_lactam to beta lactam)
## Create subtype-type table
type_subtype <- top_subtype %>% select(type, subtype)
row.names(type_subtype) <- type_subtype$subtype
type_subtype <- type_subtype %>% select(!subtype)
colnames(type_subtype) <- "ARG" # Change column name
top_subtype <- top_subtype[,-1] # Remove ARG type
# Change the first column to row name
row.names(top_subtype) <- top_subtype[,1]
top_subtype <- top_subtype[,-1]
row.names(top_subtype) <- gsub("Bifidobacteria intrinsic ileS conferring resistance to mupirocin",
"Bifidobacteria intrinsic ileS",
row.names(top_subtype)) # Adjust subtype name
# Usage pheatmap
top_subtype <- as.matrix(top_subtype) # Convert table to matrix
log_top_subtype <- log10(top_subtype) # log10 conversion
log_top_subtype[log_top_subtype == -Inf] <- NA
## Create annotation label (Note annotation_row was already created as type_subtype)
annotation_row = data.frame(Sample = factor(rep(c("ARP", "AT", "ODP"),
c(5, 5, 5))))
rownames(annotation_row) = colnames(log_top_subtype)
annotation_col <- type_subtype
annotation_col$ARG <- str_to_sentence(annotation_col$ARG) # Covert first letter to uppercase
annotation_col$ARG <- gsub("Macrolide-lincosamide-streptogramin", "MLS", annotation_col$ARG)
row.names(annotation_col) <- gsub("Bifidobacteria intrinsic ileS conferring resistance to mupirocin",
"Bifidobacteria intrinsic ileS", row.names(annotation_col))
# Select color
display.brewer.all()
brewer.pal(3, "Set1") # However, I did not select these color finally
library("ggsci")
ann_colors = list(Sample = c(AT = "#FC4E07", ARP = "#00AFBB", ODP = "#E7B800"))
## Plot
phtmap <- pheatmap(t(log_top_subtype),
annotation_row = annotation_row, annotation_col = annotation_col,
cluster_cols = FALSE, clustering_distance_rows = "euclidean")
### Rotate the cluster
library(seriation)
library(dendextend)
row_dend <- phtmap[[1]]
row_dend <- dendextend::rotate(row_dend, order = c("ODP5","ODP1","ODP3","ODP2","ODP4",
"ARP4","ARP2","ARP3","ARP1","ARP5",
"AT2","AT5","AT1","AT3","AT4") )
p <- pheatmap(t(log_top_subtype),
annotation_row = annotation_row, annotation_col = annotation_col,
cluster_cols = FALSE, annotation_colors = ann_colors,
clustering_distance_rows = "euclidean",
fontsize = 12, fontsize_row = 12, fontsize_col = 10,
cellwidth = 12, cellheight = 17, bg = "transparent",
cluster_rows=as.hclust(row_dend))
print(p)
# ggsave("ARG_subtype_cell.png", p,
#        path = "../../airborne_arg_uwtp_result/Figure/ARG",
#        width = 17, height = 8,
#        units = "in", bg='transparent') # save to png format
# Calculate subtype mean and sd
# Add sample type column
gather_arg_subtype$sample_type <- gather_arg_subtype$sample
gather_arg_subtype$sample_type <- gsub("1|2|3|4|5","",gather_arg_subtype$sample_type)
## Transfer to log value
gather_arg_subtype$copy_per_cell <- log10(gather_arg_subtype$copy_per_cell)
source("~/Documents/NTU_research/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
# Remove -Inf row (Since -Inf will cause following mean equal-Inf)
gather_arg_subtype %>% filter(!(copy_per_cell==-Inf))
# Remove -Inf row (Since -Inf will cause following mean equal-Inf)
gather_arg_subtype <- gather_arg_subtype %>% filter(!(copy_per_cell==-Inf))
source("~/Documents/NTU_research/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("~/Documents/NTU_research/airborne_arg_uwtp/ARG/ARG_subtype_cell_abundance.R", echo=TRUE)
source("~/Documents/NTU_research/airborne_arg_uwtp/ARG/ARG_subtype_compare.R", echo=TRUE)
# Legend outside the box and remove grid
gplot(higher_arg_ARP, aes(x=subtype, y=ratio, fill=mechanism)) +
geom_bar(stat="identity") +
xlab("") + ylab(expression(ARG~ratio~(Aeration~tank~PM[2.5]/Aeration~tank))) +
theme_bw() +
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9")) +
guides(fill=guide_legend(title="Mechanism",ncol=2,byrow=TRUE)) +
theme(axis.text.x = element_text(size = 30, angle = 70, hjust=1),
axis.text.y = element_text(size = 30),
axis.title = element_text(size = 27),
legend.key.size = unit(1.1, 'cm'),
legend.title = element_text(size = 35),
legend.text = element_text(size = 35),
legend.position = top,
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) #transparent legend bg
# Legend outside the box and remove grid
gplot(higher_arg_ARP, aes(x=subtype, y=ratio, fill=mechanism)) +
geom_bar(stat="identity") +
xlab("") + ylab(expression(ARG~ratio~(Aeration~tank~PM[2.5]/Aeration~tank))) +
theme_bw() +
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9")) +
guides(fill=guide_legend(title="Mechanism",ncol=2,byrow=TRUE)) +
theme(axis.text.x = element_text(size = 30, angle = 70, hjust=1),
axis.text.y = element_text(size = 30),
axis.title = element_text(size = 27),
legend.key.size = unit(1.1, 'cm'),
legend.title = element_text(size = 35),
legend.text = element_text(size = 35),
legend.position = "top",
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) #transparent legend bg
# Legend outside the box and remove grid
gplot(higher_arg_ARP, aes(x=subtype, y=ratio, fill=mechanism)) +
geom_bar(stat="identity") +
xlab("") + ylab(expression(ARG~ratio~(Aeration~tank~PM[2.5]/Aeration~tank))) +
theme_bw() +
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9")) +
guides(fill=guide_legend(title="Mechanism",ncol=2,byrow=TRUE))
# Legend outside the box and remove grid
ggplot(higher_arg_ARP, aes(x=subtype, y=ratio, fill=mechanism)) +
geom_bar(stat="identity") +
xlab("") + ylab(expression(ARG~ratio~(Aeration~tank~PM[2.5]/Aeration~tank))) +
theme_bw() +
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9")) +
guides(fill=guide_legend(title="Mechanism",ncol=2,byrow=TRUE)) +
theme(axis.text.x = element_text(size = 30, angle = 70, hjust=1),
axis.text.y = element_text(size = 30),
axis.title = element_text(size = 27),
legend.key.size = unit(1.1, 'cm'),
legend.title = element_text(size = 35),
legend.text = element_text(size = 35),
legend.position = "top",
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) #transparent legend bg
# Legend outside the box and remove grid
ggplot(higher_arg_ARP, aes(x=subtype, y=ratio, fill=mechanism)) +
geom_bar(stat="identity") +
xlab("") + ylab(expression(ARG~ratio~(Aeration~tank~PM[2.5]/Aeration~tank))) +
theme_bw() +
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9")) +
guides(fill=guide_legend(title="Mechanism",ncol=2,byrow=TRUE)) +
theme(#axis.text.x = element_text(size = 30, angle = 70, hjust=1),
#axis.text.y = element_text(size = 30),
#axis.title = element_text(size = 27),
#legend.key.size = unit(1.1, 'cm'),
#legend.title = element_text(size = 35),
#legend.text = element_text(size = 35),
legend.position = "top",
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) #transparent legend bg
# Legend outside the box and remove grid
ggplot(higher_arg_ARP, aes(x=subtype, y=ratio, fill=mechanism)) +
geom_bar(stat="identity") +
xlab("") + ylab(expression(ARG~ratio~(Aeration~tank~PM[2.5]/Aeration~tank))) +
theme_bw() +
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9")) +
guides(fill=guide_legend(title="Mechanism",nrow=2,byrow=TRUE)) +
theme(#axis.text.x = element_text(size = 30, angle = 70, hjust=1),
#axis.text.y = element_text(size = 30),
#axis.title = element_text(size = 27),
#legend.key.size = unit(1.1, 'cm'),
#legend.title = element_text(size = 35),
#legend.text = element_text(size = 35),
legend.position = "top",
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) #transparent legend bg
# Legend outside the box and remove grid
ggplot(higher_arg_ARP, aes(x=subtype, y=ratio, fill=mechanism)) +
geom_bar(stat="identity") +
xlab("") + ylab(expression(ARG~ratio~(Aeration~tank~PM[2.5]/Aeration~tank))) +
theme_bw() +
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9")) +
guides(fill=guide_legend(title="Mechanism",nrow=2,byrow=TRUE)) +
theme(axis.text.x = element_text(angle = 70, hjust=1),
#axis.text.y = element_text(size = 30),
#axis.title = element_text(size = 27),
#legend.key.size = unit(1.1, 'cm'),
#legend.title = element_text(size = 35),
#legend.text = element_text(size = 35),
legend.position = "top",
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) #transparent legend bg
# Legend outside the box and remove grid
p <- ggplot(higher_arg_ARP, aes(x=subtype, y=ratio, fill=mechanism)) +
geom_bar(stat="identity") +
xlab("") + ylab(expression(ARG~ratio~(Aeration~tank~PM[2.5]/Aeration~tank))) +
theme_bw() +
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9")) +
guides(fill=guide_legend(title="Mechanism",nrow=2,byrow=TRUE)) +
theme(axis.text.x = element_text(angle = 70, hjust=1),
#axis.text.y = element_text(size = 30),
#axis.title = element_text(size = 27),
#legend.key.size = unit(1.1, 'cm'),
#legend.title = element_text(size = 35),
#legend.text = element_text(size = 35),
legend.position = "top",
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) #transparent legend bg
ggsave("ARG_mechanism_relative_abundance.png_v2", p,
path = "../../airborne_arg_uwtp_result/Figure/ARG",
width = 30, height = 16,
units = "in", bg='transparent') # save to png format
ggsave("ARG_mechanism_relative_abundance_v2.png", p,
path = "../../airborne_arg_uwtp_result/Figure/ARG",
width = 30, height = 16,
units = "in", bg='transparent') # save to png format
ggsave("ARG_mechanism_relative_abundance_v2.png", p,
path = "../../airborne_arg_uwtp_result/Figure/ARG",
width = 15, height = 10,
units = "in", bg='transparent') # save to png format
View(higher_arg_ARP)
ggsave("ARG_mechanism_relative_abundance_v2.png", p,
path = "../../airborne_arg_uwtp_result/Figure/ARG",
width = 15, height = 5,
units = "in", bg='transparent') # save to png format
ggsave("ARG_mechanism_relative_abundance_v2.png", p,
path = "../../airborne_arg_uwtp_result/Figure/ARG",
width = 15, height = 7,
units = "in", bg='transparent') # save to png format
ggsave("ARG_mechanism_relative_abundance_v2.png", p,
path = "../../airborne_arg_uwtp_result/Figure/ARG",
width = 110, height = 7,
units = "in", bg='transparent') # save to png format
ggsave("ARG_mechanism_relative_abundance_v2.png", p,
path = "../../airborne_arg_uwtp_result/Figure/ARG",
width = 10, height = 7,
units = "in", bg='transparent') # save to png format
ggsave("ARG_mechanism_relative_abundance_v2.png", p,
path = "../../airborne_arg_uwtp_result/Figure/ARG",
width = 8, height = 7,
units = "in", bg='transparent') # save to png format
ggsave("ARG_mechanism_relative_abundance_v2.png", p,
path = "../../airborne_arg_uwtp_result/Figure/ARG",
width = 9, height = 7,
units = "in", bg='transparent') # save to png format
# Legend outside the box and remove grid
p <- ggplot(higher_arg_ARP, aes(x=subtype, y=ratio, fill=mechanism)) +
geom_bar(stat="identity") +
xlab("") + ylab(expression(ARG~ratio~(Aeration~tank~PM[2.5]/Aeration~tank))) +
theme_bw() +
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9")) +
guides(fill=guide_legend(title="Mechanism",nrow=2,byrow=TRUE)) +
theme(axis.text.x = element_text(angle = 70, hjust=1),
#axis.text.y = element_text(size = 30),
#axis.title = element_text(size = 27),
#legend.key.size = unit(1.1, 'cm'),
legend.title = element_text(size = 15),
legend.text = element_text(size = 15),
legend.position = "top",
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) #transparent legend bg
ggsave("ARG_mechanism_relative_abundance_v2.png", p,
path = "../../airborne_arg_uwtp_result/Figure/ARG",
width = 9, height = 7,
units = "in", bg='transparent') # save to png format
# Legend outside the box and remove grid
p <- ggplot(higher_arg_ARP, aes(x=subtype, y=ratio, fill=mechanism)) +
geom_bar(stat="identity") +
xlab("") + ylab(expression(ARG~ratio~(Aeration~tank~PM[2.5]/Aeration~tank))) +
theme_bw() +
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9")) +
guides(fill=guide_legend(title="Mechanism",nrow=2,byrow=TRUE)) +
theme(axis.text.x = element_text(angle = 70, hjust=1),
#axis.text.y = element_text(size = 30),
#axis.title = element_text(size = 27),
#legend.key.size = unit(1.1, 'cm'),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.position = "top",
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) #transparent legend bg
ggsave("ARG_mechanism_relative_abundance_v2.png", p,
path = "../../airborne_arg_uwtp_result/Figure/ARG",
width = 9, height = 7,
units = "in", bg='transparent') # save to png format
# Legend outside the box and remove grid
p <- ggplot(higher_arg_ARP, aes(x=subtype, y=ratio, fill=mechanism)) +
geom_bar(stat="identity") +
xlab("") + ylab(expression(ARG~ratio~(Aeration~tank~PM[2.5]/Aeration~tank))) +
theme_bw() +
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9")) +
guides(fill=guide_legend(title="Mechanism",nrow=2,byrow=TRUE)) +
theme(axis.text.x = element_text(angle = 70, hjust=1),
#axis.text.y = element_text(size = 30),
#axis.title = element_text(size = 27),
#legend.key.size = unit(1.1, 'cm'),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
legend.position = "top",
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) #transparent legend bg
ggsave("ARG_mechanism_relative_abundance_v2.png", p,
path = "../../airborne_arg_uwtp_result/Figure/ARG",
width = 9, height = 7,
units = "in", bg='transparent') # save to png format
# Legend outside the box and remove grid
p <- ggplot(higher_arg_ARP, aes(x=subtype, y=ratio, fill=mechanism)) +
geom_bar(stat="identity") +
xlab("") + ylab(expression(ARG~ratio~(Aeration~tank~PM[2.5]/Aeration~tank))) +
theme_bw() +
scale_fill_manual(values=c("#FB8072", "#80B1D3", "#FDB462",
"#B3DE69","#BEBADA","#FCCDE5","#D9D9D9")) +
guides(fill=guide_legend(title="Mechanism",nrow=2,byrow=TRUE)) +
theme(axis.text.x = element_text(angle = 70, hjust=1),
#axis.text.y = element_text(size = 30),
#axis.title = element_text(size = 27),
#legend.key.size = unit(1.1, 'cm'),
legend.title = element_text(size = 12.5),
legend.text = element_text(size = 12.5),
legend.position = "top",
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent')) #transparent legend bg
ggsave("ARG_mechanism_relative_abundance_v2.png", p,
path = "../../airborne_arg_uwtp_result/Figure/ARG",
width = 9, height = 7,
units = "in", bg='transparent') # save to png format
